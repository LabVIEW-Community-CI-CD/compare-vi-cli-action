# Agent Handoff - Compare VI CLI Action

## Context Snapshot
- Re-ran `node tools/npm/run-script.mjs priority:sync`; without `gh` or a GitHub token available the
  script fell back to the cached standing issue (#134) and logged the missing CLI error. The cache now
  records the unauthenticated attempt timestamped 2025-10-16T17:16Z.
- REST fallback attempts failed unauthenticated (`TypeError: fetch failed`).
- Working tree remains on branch `work`; no topic branch (for example `issue/134-cli-companion`) is
  present locally.
- Neither GitHub CLI nor PowerShell (`pwsh`) are installed in this container right now, so dispatcher
  or guard scripts cannot be invoked until those prerequisites are restored.
- No dispatcher reruns happened this session. The previously referenced
  `tests/results/_diagnostics/guard.json` file is absent, so the prior guard-loop diagnostics are no
  longer available in-tree.
- `tests/results/_agent/handoff/test-summary.json` still reflects the
  2025-10-16T15:48Z `priority:handoff-tests` execution; no new validation commands were run here.
- Placeholder TestStand and CLI-only artifacts remain under `tests/results/`, matching the state
  described in issue #134.

## Status & Known Gaps
1. GitHub CLI is missing entirely, so standing-priority syncs cannot reach GitHub until `gh` is
   installed and authenticated.
2. Dispatcher coverage is still outstanding. No recent runs exist and the last guard diagnostics are
   gone, so the failure mode needs to be recreated before we can debug it.
3. PowerShell 7+ (with Pester) is absent, blocking dispatcher executions and guard sweeps inside this
   container.
4. TestStand session artifacts (`tests/results/teststand-session/`) and `tests/results/cli-only/`
   still contain placeholder data; real LabVIEW runs remain required.
5. Issue/PR #134 lacks refreshed notes summarizing CLI auth state, dispatcher attempts, and artifact
   provenance.

## Suggested Next Actions
1. Install GitHub CLI, authenticate (`gh auth login` or set `GH_TOKEN`), and rerun
   `node tools/npm/run-script.mjs priority:sync` to refresh `.agent_priority_cache.json` with live
   metadata.
2. Restore PowerShell 7 (plus Pester) so dispatcher/guard tooling is available again.
3. Recreate the dispatcher guard failure by running `pwsh -File Invoke-PesterTests.ps1 -IntegrationMode
   exclude`; capture any new guard artifacts (such as `_diagnostics/guard.json`) for analysis and clear
   blockers so a full run can complete.
4. Produce genuine CLI-only and TestStand session artifacts on a LabVIEW-capable host, then validate
   them via the JSON schema tooling.
5. Update issue/PR #134 with notes covering toolchain setup, dispatcher outcomes, and artifact
   provenance.

## First Actions for the Next Agent
1. Install and authenticate GitHub CLI, then rerun `node tools/npm/run-script.mjs priority:sync` so the
   standing-priority cache reflects live metadata.
2. Reinstall PowerShell 7 + Pester (or confirm availability) and rerun the dispatcher with guard
   diagnostics enabled to reproduce the prior loop and gather artifacts.
3. Replace the placeholder `tests/results/teststand-session/` and `tests/results/cli-only/` payloads
   with real outputs from a LabVIEW-capable host, validating them against the published schemas.
4. Record the new dispatcher and schema outcomes in the handoff telemetry, then update issue/PR #134
   with the refreshed context.

## Notes for Next Agent
- GitHub CLI and PowerShell are currently absent; plan to reinstall before attempting dispatcher or
  guard commands.
- `tests/results/_agent/handoff/test-summary.json` records the 2025-10-16T15:48Z
  `priority:handoff-tests` run; nothing newer exists.
- No watcher telemetry exists for this session; `_agent/handoff/` watcher assets remain empty.
- `.agent_priority_cache.json` mirrors the cached metadata for issue #134 until GitHub CLI is
  installed and authenticated.
- The container still lacks LabVIEW/LVCompare; genuine artifacts must come from a Windows host with
  those tools available.
- Schema validation will continue to rely on placeholder TestStand data until real outputs are
  imported.

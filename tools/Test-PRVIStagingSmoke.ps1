#Requires -Version 7.0
<#
.SYNOPSIS
End-to-end smoke test for the PR VI staging workflow.

.DESCRIPTION
Creates a disposable branch with synthetic VI changes, opens a draft PR,
dispatches `pr-vi-staging.yml`, ensures the run succeeds, and verifies the
`vi-staging-ready` label appears. By default, the scratch branch/PR are cleaned
up once the smoke passes.

.PARAMETER BaseBranch
Branch to branch from when generating the synthetic changes. Defaults to
`develop`.

.PARAMETER KeepBranch
Skip cleanup so the branch and draft PR remain available for inspection.

.PARAMETER DryRun
Emit the planned steps without executing them.
#>
[CmdletBinding()]
param(
    [string]$BaseBranch = 'develop',
    [switch]$KeepBranch,
    [switch]$DryRun
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Invoke-Git {
    param(
        [Parameter(Mandatory)]
        [string[]]$Arguments
    )
    $output = git @Arguments 2>&1
    if ($LASTEXITCODE -ne 0) {
        throw "git $($Arguments -join ' ') failed:`n$output"
    }
    return @($output -split "`r?`n" | Where-Object { $_ -ne '' })
}

function Invoke-Gh {
    param(
        [Parameter(Mandatory)]
        [string[]]$Arguments,
        [switch]$ExpectJson
    )
    $output = gh @Arguments 2>&1
    if ($LASTEXITCODE -ne 0) {
        throw "gh $($Arguments -join ' ') failed:`n$output"
    }
    if ($ExpectJson) {
        if (-not $output) { return $null }
        return $output | ConvertFrom-Json
    }
    return $output
}

function Touch-ViFile {
    param(
        [Parameter(Mandatory)]
        [string]$Path
    )
    if (-not (Test-Path -LiteralPath $Path -PathType Leaf)) {
        throw "VI file not found: $Path"
    }
    $bytes = [System.IO.File]::ReadAllBytes($Path)
    if ($bytes.Length -lt 1) {
        throw "VI file is empty: $Path"
    }
    $bytes[-1] = $bytes[-1] -bxor 1
    [System.IO.File]::WriteAllBytes($Path, $bytes)
}

Write-Verbose "Base branch: $BaseBranch"
Write-Verbose "KeepBranch: $KeepBranch"
Write-Verbose "DryRun: $DryRun"

$initialBranch = Invoke-Git -Arguments @('rev-parse', '--abbrev-ref', 'HEAD') | Select-Object -First 1
Write-Host "Current branch: $initialBranch"

$status = @(Invoke-Git -Arguments @('status', '--porcelain'))
if ($status.Count -eq 1 -and [string]::IsNullOrWhiteSpace($status[0])) {
    $status = @()
}
if ($status.Count -gt 0 -and -not $DryRun) {
    throw 'Working tree not clean. Commit or stash changes before running the smoke test.'
}

$timestamp = (Get-Date).ToString('yyyyMMddHHmmss')
$scratchBranch = "smoke/vi-stage-$timestamp"
$prTitle = "Smoke: VI staging label test ($timestamp)"
$note = "staging smoke $timestamp"

Write-Host "Scratch branch would be: $scratchBranch"

if ($DryRun) {
    Write-Host "Dry-run mode: no changes will be made."
    Write-Host "Plan:"
    Write-Host "  - Fetch origin/$BaseBranch"
    Write-Host "  - Create $scratchBranch from origin/$BaseBranch"
    Write-Host "  - Mutate VI1.vi and VI2.vi, commit, push"
    Write-Host "  - Open draft PR, dispatch pr-vi-staging.yml, verify label"
    Write-Host "  - Cleanup branch/PR (unless -KeepBranch)"
    return
}

$context = [ordered]@{
    InitialBranch = $initialBranch
    ScratchBranch = $scratchBranch
    PrNumber      = $null
    WorkflowRunId = $null
}

try {
    Invoke-Git -Arguments @('fetch', 'origin', $BaseBranch)
    Invoke-Git -Arguments @('checkout', '-b', $scratchBranch, "origin/$BaseBranch")

    Touch-ViFile -Path 'VI1.vi'
    Touch-ViFile -Path 'VI2.vi'

    Invoke-Git -Arguments @('add', 'VI1.vi', 'VI2.vi')
    Invoke-Git -Arguments @('commit', '-m', 'chore: synthetic VI changes for staging smoke')

    Invoke-Git -Arguments @('push', '-u', 'origin', $scratchBranch)

    $prBody = @(
        'Automation-only PR used to smoke test the VI staging workflow.',
        '',
        'Generated by tools/Test-PRVIStagingSmoke.ps1.'
    ) -join "`n"

    Invoke-Gh -Arguments @('pr', 'create',
        '--base', $BaseBranch,
        '--head', $scratchBranch,
        '--title', $prTitle,
        '--body', $prBody,
        '--draft') | Out-Null

    $prInfo = Invoke-Gh -Arguments @('pr', 'view', $scratchBranch, '--json', 'number', 'url') -ExpectJson
    if (-not $prInfo) {
        throw 'Failed to obtain PR information.'
    }
    $context.PrNumber = [int]$prInfo.number
    Write-Host "Draft PR ##$($context.PrNumber) created at $($prInfo.url)."

    Invoke-Gh -Arguments @('workflow', 'run', 'pr-vi-staging.yml',
        '--ref', $scratchBranch,
        '-f', "pr=$($context.PrNumber)",
        '-f', "note=$note") | Out-Null

    Write-Host 'Waiting for pr-vi-staging workflow to complete...'
    $runId = $null
    for ($attempt = 0; $attempt -lt 60; $attempt++) {
        $runs = Invoke-Gh -Arguments @('run', 'list',
            '--workflow', 'pr-vi-staging.yml',
            '--branch', $scratchBranch,
            '--limit', '1',
            '--json', 'databaseId,status,conclusion,headBranch') -ExpectJson
        if ($runs -and $runs.Count -gt 0 -and $runs[0].headBranch -eq $scratchBranch) {
            $runId = $runs[0].databaseId
            if ($runs[0].status -eq 'completed') { break }
        }
        Start-Sleep -Seconds 5
    }

    if (-not $runId) {
        throw 'Unable to locate dispatched workflow run.'
    }
    $context.WorkflowRunId = $runId

    Write-Host "Monitoring workflow run $runId..."
    $watchArgs = @('tools/npm/run-script.mjs', 'ci:watch:rest', '--', '--workflow', '.github/workflows/pr-vi-staging.yml', '--run-id', $runId)
    $watchOutput = node @watchArgs
    if ($LASTEXITCODE -ne 0) {
        throw ("Watcher exited with code {0}:`n{1}" -f $LASTEXITCODE, $watchOutput)
    }
    Write-Host $watchOutput

    $runSummary = Invoke-Gh -Arguments @('run', 'view', $runId.ToString(), '--json', 'conclusion') -ExpectJson
    if ($runSummary.conclusion -ne 'success') {
        throw "Workflow run $runId concluded with '$($runSummary.conclusion)'."
    }

    $labelInfo = Invoke-Gh -Arguments @('pr', 'view', $context.PrNumber.ToString(), '--json', 'labels') -ExpectJson
    $labels = $labelInfo.labels | ForEach-Object { $_.name }
    if (-not ($labels -contains 'vi-staging-ready')) {
        throw "Expected label 'vi-staging-ready' not found on PR ##$($context.PrNumber)."
    }

    $resultsDir = Join-Path 'tests' 'results' '_agent' 'smoke' 'vi-stage'
    New-Item -ItemType Directory -Path $resultsDir -Force | Out-Null
    $summaryPath = Join-Path $resultsDir "smoke-$timestamp.json"
    $summary = [ordered]@{
        branch   = $scratchBranch
        prNumber = $context.PrNumber
        runId    = $runId
        note     = $note
        created  = (Get-Date).ToString('o')
    }
    $summary | ConvertTo-Json -Depth 4 | Set-Content -LiteralPath $summaryPath -Encoding utf8

    Write-Host "Smoke test succeeded. Label detected on PR ##$($context.PrNumber)."
    Write-Host "Summary written to $summaryPath"
}
catch {
    Write-Error $_
    throw
}
finally {
    if ($DryRun -or $KeepBranch) {
        Write-Host 'Skipping cleanup per request.'
    } else {
        Write-Host 'Cleaning up scratch resources...'

        try {
            if ($context.PrNumber) {
                Invoke-Gh -Arguments @('pr', 'edit', $context.PrNumber.ToString(), '--remove-label', 'vi-staging-ready') -ErrorAction SilentlyContinue | Out-Null
                Invoke-Gh -Arguments @('pr', 'close', $context.PrNumber.ToString(), '--delete-branch') -ErrorAction SilentlyContinue | Out-Null
            }
        } catch {
            Write-Warning "PR cleanup encountered an issue: $($_.Exception.Message)"
        }

        try {
            Invoke-Git -Arguments @('checkout', $context.InitialBranch) | Out-Null
        } catch {
            Write-Warning "Failed to restore branch $($context.InitialBranch): $($_.Exception.Message)"
        }

        try {
            Invoke-Git -Arguments @('branch', '-D', $context.ScratchBranch) | Out-Null
        } catch {
            # ignore
        }
    }
}

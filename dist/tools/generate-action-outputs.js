import './bootstrap/node-deprecations.js';
import { readFileSync, mkdirSync, writeFileSync } from 'fs';
import { dirname, join } from 'path';
import yaml from 'js-yaml';
function renderSection(title) {
    return `## ${title}\n`;
}
function main() {
    const repoRoot = process.cwd();
    const actionPath = join(repoRoot, 'action.yml');
    const outPath = join(repoRoot, 'docs', 'action-outputs.md');
    const raw = readFileSync(actionPath, 'utf8');
    const spec = yaml.load(raw);
    const lines = [];
    lines.push(`# Compare VI Action: Inputs & Outputs`);
    lines.push('');
    lines.push('Generated by `node tools/npm/run-script.mjs generate:outputs`. Do not edit manually.');
    lines.push('');
    if (spec.name) {
        lines.push(`**Action Name:** ${spec.name}`);
    }
    if (spec.description) {
        lines.push(`**Description:** ${spec.description}`);
    }
    lines.push('');
    if (spec.inputs && Object.keys(spec.inputs).length) {
        lines.push(renderSection('Inputs'));
        for (const key of Object.keys(spec.inputs).sort()) {
            const i = spec.inputs[key];
            lines.push(`### ${key}`);
            lines.push('');
            if (i.description)
                lines.push(i.description.trim());
            if (i.required !== undefined)
                lines.push('');
            if (i.required !== undefined)
                lines.push(`- Required: ${i.required}`);
            if (i.default !== undefined && i.default !== '')
                lines.push(`- Default: \`${i.default}\``);
            lines.push('');
        }
    }
    if (spec.outputs && Object.keys(spec.outputs).length) {
        lines.push(renderSection('Outputs'));
        for (const key of Object.keys(spec.outputs).sort()) {
            const o = spec.outputs[key];
            lines.push(`### ${key}`);
            lines.push('');
            if (o.description)
                lines.push(o.description.trim());
            lines.push('');
        }
    }
    mkdirSync(dirname(outPath), { recursive: true });
    writeFileSync(outPath, lines.join('\n'), 'utf8');
    // eslint-disable-next-line no-console
    console.log(`Generated ${outPath}`);
}
main();

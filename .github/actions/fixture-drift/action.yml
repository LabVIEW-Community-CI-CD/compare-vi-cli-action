name: Fixture Drift Orchestrator
description: Validate fixtures, orchestrate drift artifacts, upload, summarize, and comment on PRs (sticky)
author: LabVIEW-Community-CI-CD

inputs:
  render-report:
    description: Generate compare-report.html when LVCompare is available
    required: false
    default: 'true'
  comment-on-fail:
    description: Post/update a PR comment when drift or structural failure occurs
    required: false
    default: 'true'
  upload-artifacts:
    description: Upload generated artifacts using actions/upload-artifact
    required: false
    default: 'true'
  only-upload-on-failure:
    description: Upload artifacts only when status != ok
    required: false
    default: 'true'
  artifact-name:
    description: Artifact name to use when uploading
    required: false
    default: fixture-drift
  retention-days:
    description: Retention days for uploaded artifacts (if supported by runner policy)
    required: false
    default: ''
  output-dir:
    description: Optional output directory (defaults to results/fixture-drift/<utc>)
    required: false
  base-path:
    description: Optional base VI path to pass to orchestrator
    required: false
  head-path:
    description: Optional head VI path to pass to orchestrator
    required: false
  lv-compare-args:
    description: Additional LVCompare args
    required: false
    default: -nobdcosm -nofppos -noattr
  pr-update-enabled:
    description: Update PR body with a sticky VI Compare summary section (pull_request events only)
    required: false
    default: 'true'
  pr-update-on:
    description: "When to update PR body: non-ok | drift-only | always"
    required: false
    default: 'non-ok'
  pr-section-id:
    description: Marker ID for PR body section (renders as <!-- <id>:start --> / <!-- <id>:end -->)
    required: false
    default: fixture-drift-vi-compare

outputs:
  status:
    description: Outcome status from orchestrator (ok | drift | fail-structural | unknown)
    value: ${{ steps.orchestrate.outputs.status }}
  summary_path:
    description: Path to drift-summary.json (if present)
    value: ${{ steps.orchestrate.outputs.summary_path }}

runs:
  using: composite
  steps:
    - name: Pre-flight checks (paths & OS)
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        if ($IsWindows -ne $true) { throw 'This action requires Windows runners.' }
        $vf = Join-Path "${{ github.workspace }}" 'tools/Validate-Fixtures.ps1'
        $of = Join-Path "${{ github.workspace }}" 'scripts/On-FixtureValidationFail.ps1'
        if (-not (Test-Path -LiteralPath $vf)) { throw "Missing validator script: $vf" }
        if (-not (Test-Path -LiteralPath $of)) { throw "Missing orchestrator script: $of" }

    - name: Generate validator outputs (strict and override)
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        pwsh -NoLogo -NoProfile -File "${{ github.workspace }}\tools\Validate-Fixtures.ps1" -Json | Out-File -FilePath strict.json -Encoding utf8
        pwsh -NoLogo -NoProfile -File "${{ github.workspace }}\tools\Validate-Fixtures.ps1" -Json -TestAllowFixtureUpdate | Out-File -FilePath override.json -Encoding utf8

    - name: Orchestrate drift artifacts
      id: orchestrate
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Continue'
        $outDir = if ('${{ inputs.output-dir }}') { '${{ inputs.output-dir }}' } else { Join-Path 'results' 'fixture-drift' }
        $args = @('-StrictJson','strict.json','-OverrideJson','override.json')
        if ('${{ inputs.render-report }}' -eq 'true') { $args += '-RenderReport' }
        if ('${{ inputs.base-path }}') { $args += @('-BasePath','${{ inputs.base-path }}') }
        if ('${{ inputs.head-path }}') { $args += @('-HeadPath','${{ inputs.head-path }}') }
        if ('${{ inputs.lv-compare-args }}') { $args += @('-LvCompareArgs','${{ inputs.lv-compare-args }}') }
        $args += @('-OutputDir',$outDir)
        pwsh -NoLogo -NoProfile -File "${{ github.workspace }}\scripts\On-FixtureValidationFail.ps1" @args
        $exit = $LASTEXITCODE
        $root = Join-Path (Get-Location) 'results/fixture-drift'
        $latest = $null; if (Test-Path $root) { $latest = Get-ChildItem -LiteralPath $root -Directory | Sort-Object Name -Descending | Select-Object -First 1 }
        $sumPath = $null
        $status = 'unknown'
        if ($latest) {
          $sumPath = Join-Path $latest.FullName 'drift-summary.json'
          if (Test-Path $sumPath) {
            $j = Get-Content -LiteralPath $sumPath -Raw | ConvertFrom-Json
            if ($j.status) { $status = [string]$j.status }
          }
        }
        "status=$status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        if ($sumPath) { "summary_path=$sumPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8 }
        if ($latest) { "run_dir=$($latest.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8 }
        # Do not fail here to allow artifact upload and comment; a later step will enforce failure.

    - name: Upload drift artifacts (with retention)
      if: always() && inputs.upload-artifacts == 'true' && (inputs.only-upload-on-failure != 'true' || steps.orchestrate.outputs.status != 'ok') && inputs.retention-days != ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: |
          results/fixture-drift/**
          strict.json
          override.json
        retention-days: ${{ inputs.retention-days }}

    - name: Upload drift artifacts (default retention)
      if: always() && inputs.upload-artifacts == 'true' && (inputs.only-upload-on-failure != 'true' || steps.orchestrate.outputs.status != 'ok') && inputs.retention-days == ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: |
          results/fixture-drift/**
          strict.json
          override.json

    - name: Write step summary
      if: always()
      shell: pwsh
      run: |
        $root = Join-Path (Get-Location) 'results/fixture-drift'
        if (Test-Path $root) {
          $latest = Get-ChildItem -LiteralPath $root -Directory | Sort-Object Name -Descending | Select-Object -First 1
          if ($latest) { $sum = Join-Path $latest.FullName 'drift-summary.json' } else { $sum = $null }
        }
        if ($sum -and (Test-Path $sum)) {
          $j = Get-Content -LiteralPath $sum -Raw | ConvertFrom-Json
          $lines = @()
          $lines += '### Fixture Drift Summary'
          $lines += ''
          if ($j.schema) { $lines += "- Schema: $($j.schema)" }
          if ($j.generatedAtUtc) { $lines += "- GeneratedAtUtc: $($j.generatedAtUtc)" }
          $lines += "- Status: $($j.status)"
          $lines += "- ExitCode: $($j.exitCode)"
          $cat = if ($j.categories) { ($j.categories -join ', ') } else { 'none' }
          $lines += "- Categories: $cat"
          $lines += ''
          if ($j.artifactPaths) {
            $lines += 'Artifacts:'
            foreach ($a in $j.artifactPaths) { $lines += "- $a" }
          }
          if ($j.files) {
            $lines += ''
            $lines += 'Files:'
            foreach ($f in $j.files) {
              $p = $f.path; $t = $f.lastWriteTimeUtc; $len = $f.length
              if ($len -ne $null) { $lines += "- $p — $t ($len bytes)" } else { $lines += "- $p — $t" }
            }
          }
          $lines -join "`n" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
        } else {
          'No drift-summary.json found' | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
        }

    - name: Validate drift summary schema (schema-lite)
      if: always()
      shell: pwsh
      run: |
        $root = Join-Path (Get-Location) 'results/fixture-drift'
        if (-not (Test-Path $root)) { return }
        $latest = Get-ChildItem -LiteralPath $root -Directory | Sort-Object Name -Descending | Select-Object -First 1
        if (-not $latest) { return }
        $sum = Join-Path $latest.FullName 'drift-summary.json'
        if (-not (Test-Path $sum)) { return }
        $schemaPath = Join-Path "${{ github.workspace }}" 'docs/schemas/fixture-drift-summary-v1.schema.json'
        if (Test-Path $schemaPath) {
          pwsh -NoLogo -NoProfile -File "${{ github.workspace }}\tools\Invoke-JsonSchemaLite.ps1" -JsonPath $sum -SchemaPath $schemaPath
          # Do not fail the job here; schema errors will have been printed for diagnosis.
          if ($LASTEXITCODE -ne 0) { Write-Host "Schema-lite validation returned code $LASTEXITCODE" }
        }

    - name: Generate VI Compare PR snippet (optional)
      if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false && inputs.comment-on-fail == 'true' && inputs.render-report == 'true' && inputs.pr-update-enabled == 'true' }}
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Continue'
        try {
          $canonical = 'C:\\Program Files\\National Instruments\\Shared\\LabVIEW Compare\\LVCompare.exe'
          if (-not (Test-Path -LiteralPath $canonical -PathType Leaf)) {
            Write-Host 'LVCompare.exe not found at canonical path; skipping VI Compare snippet generation.'
            return
          }
          $root = Join-Path (Get-Location) 'results/fixture-drift'
          $latest = $null; if (Test-Path $root) { $latest = Get-ChildItem -LiteralPath $root -Directory | Sort-Object Name -Descending | Select-Object -First 1 }
          $outDir = if ($latest) { Join-Path $latest.FullName 'vi-compare' } else { 'results/fixture-drift/vi-compare' }
          New-Item -ItemType Directory -Force -Path $outDir | Out-Null
          $args = @('-OutputDirectory',$outDir)
          if ('${{ inputs.base-path }}') { $args += @('-Base','${{ inputs.base-path }}') }
          if ('${{ inputs.head-path }}') { $args += @('-Head','${{ inputs.head-path }}') }
          if ('${{ inputs.lv-compare-args }}') { $args += @('-LvCompareArgs','${{ inputs.lv-compare-args }}') }
          pwsh -NoLogo -NoProfile -File "${{ github.workspace }}\scripts\Generate-PullRequestCompareReport.ps1" @args | Out-Null
        } catch {
          Write-Host "VI Compare snippet generation failed: $_"
        }

    - name: Update PR body with VI Compare summary (sticky section)
      if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false && inputs.comment-on-fail == 'true' && inputs.render-report == 'true' && inputs.pr-update-enabled == 'true' }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Continue'
        # Determine if PR update should run based on inputs.pr-update-on and orchestrate status
        $when = '${{ inputs.pr-update-on }}'
        $status = '${{ steps.orchestrate.outputs.status }}'
        $eligible = $false
        switch ($when) {
          'always' { $eligible = $true }
          'non-ok' { if ($status -ne 'ok') { $eligible = $true } }
          'drift-only' { if ($status -eq 'drift') { $eligible = $true } }
          default { if ($status -ne 'ok') { $eligible = $true } }
        }
        if (-not $eligible) { Write-Host "PR update skipped by policy (status='$status', when='$when')."; exit 0 }
        $root = Join-Path (Get-Location) 'results/fixture-drift'
        $latest = $null; if (Test-Path $root) { $latest = Get-ChildItem -LiteralPath $root -Directory | Sort-Object Name -Descending | Select-Object -First 1 }
        $snippet = if ($latest) { Join-Path $latest.FullName 'vi-compare/pr-diff-snippet.md' } else { 'results/fixture-drift/vi-compare/pr-diff-snippet.md' }
        if (Test-Path -LiteralPath $snippet -PathType Leaf) {
          $id = '${{ inputs.pr-section-id }}'
          $start = "<!-- $id:start -->"
          $end = "<!-- $id:end -->"
          try { pwsh -NoLogo -NoProfile -File "${{ github.workspace }}\scripts\Update-PullRequestBody.ps1" -MarkdownPath $snippet -StartMarker $start -EndMarker $end }
          catch { Write-Host "PR body update failed: $_" }
        } else {
          Write-Host 'No VI Compare snippet found; skipping PR body update.'
        }

    - name: Consolidate orchestrator debug JSON
      if: always()
      shell: pwsh
      run: |
        $runDir = '${{ steps.orchestrate.outputs.run_dir }}'
        if (-not $runDir) { $runDir = Join-Path (Get-Location) 'results/fixture-drift' }
        if (-not (Test-Path $runDir)) { New-Item -ItemType Directory -Force -Path $runDir | Out-Null }
        $status = '${{ steps.orchestrate.outputs.status }}'
        $summary = '${{ steps.orchestrate.outputs.summary_path }}'
        $id = '${{ inputs.pr-section-id }}'
        $snippet = Join-Path $runDir 'vi-compare/pr-diff-snippet.md'
        $snippetExists = Test-Path -LiteralPath $snippet -PathType Leaf
        $when = '${{ inputs.pr-update-on }}'
        $eligible = $false; if ($when -eq 'always' -or ($when -eq 'non-ok' -and $status -ne 'ok') -or ($when -eq 'drift-only' -and $status -eq 'drift')) { $eligible = $true }
        $obj = [ordered]@{
          schema = 'fixture-drift-orchestrator-debug-v1'
          status = $status
          summaryPath = $summary
          runDir = $runDir
          prSectionId = $id
          prUpdatePolicy = $when
          prUpdateEligible = $eligible
          viCompare = [ordered]@{
            snippetPath = $snippet
            snippetExists = $snippetExists
          }
          generatedAtUtc = [DateTime]::UtcNow.ToString('o')
        }
        $out = Join-Path $runDir 'orchestrator-debug.json'
        $obj | ConvertTo-Json -Depth 5 | Out-File -FilePath $out -Encoding utf8
        Write-Host "Orchestrator debug saved: $out"

    - name: Upload orchestrator debug (always)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: fixture-orchestrator-debug
        path: |
          ${{ steps.orchestrate.outputs.run_dir }}/orchestrator-debug.json
          results/fixture-drift/orchestrator-debug.json

    - name: Schema-lite validate orchestrator debug
      if: always()
      shell: pwsh
      run: |
        $runDir = '${{ steps.orchestrate.outputs.run_dir }}'
        if (-not $runDir) { $runDir = 'results/fixture-drift' }
        $path1 = Join-Path $runDir 'orchestrator-debug.json'
        $schema = Join-Path "${{ github.workspace }}" 'docs/schemas/fixture-drift-orchestrator-debug-v1.schema.json'
        if (Test-Path $path1 -PathType Leaf -and (Test-Path $schema -PathType Leaf)) {
          pwsh -NoLogo -NoProfile -File "${{ github.workspace }}\tools\Invoke-JsonSchemaLite.ps1" -JsonPath $path1 -SchemaPath $schema
          if ($LASTEXITCODE -ne 0) { Write-Host "orchestrator-debug schema-lite returned $LASTEXITCODE (non-fatal)" }
        } else {
          Write-Host 'orchestrator-debug.json or schema not found; skipping schema-lite.'
        }

    - name: Comment on PR with artifact links (sticky)
      if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false && steps.orchestrate.outputs.status != 'ok' && inputs.comment-on-fail == 'true' }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        $marker = '<!-- fixture-drift-comment -->'
        $runUrl = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        $root = Join-Path (Get-Location) 'results/fixture-drift'
        $latest = $null; if (Test-Path $root) { $latest = Get-ChildItem -LiteralPath $root -Directory | Sort-Object Name -Descending | Select-Object -First 1 }
        $sum = $null
        if ($latest) { $sum = Join-Path $latest.FullName 'drift-summary.json' }
        $status = 'unknown'; $exitCode = ''
        $artifactsList = @()
        if ($sum -and (Test-Path $sum)) {
          $j = Get-Content -LiteralPath $sum -Raw | ConvertFrom-Json
          if ($j.status) { $status = [string]$j.status }
          if ($j.exitCode) { $exitCode = [string]$j.exitCode }
          if ($j.artifactPaths) { $artifactsList = @($j.artifactPaths) }
        }
        # Query run artifacts for direct links
        $repoFull = '${{ github.repository }}'
        $owner,$repo = $repoFull.Split('/')
        $runId = '${{ github.run_id }}'
        $apiBase = "https://api.github.com"
        $headers = @{ Authorization = "Bearer $env:GITHUB_TOKEN"; 'X-GitHub-Api-Version' = '2022-11-28'; Accept='application/vnd.github+json' }
        $artifactLinks = @()
        try {
          $page = 1; $pageSize = 100
          while ($true) {
            $artifactsEndpoint = "$apiBase/repos/$owner/$repo/actions/runs/$runId/artifacts?per_page=$pageSize&page=$page"
            $resp = Invoke-RestMethod -Method Get -Uri $artifactsEndpoint -Headers $headers
            if (-not $resp -or -not $resp.artifacts -or $resp.artifacts.Count -eq 0) { break }
            foreach ($art in $resp.artifacts) {
              $name = [string]$art.name
              $dl = if ($art.archive_download_url) { [string]$art.archive_download_url } else { "$apiBase/repos/$owner/$repo/actions/artifacts/$($art.id)/zip" }
              $artifactLinks += "[$name]($dl)"
            }
            if ($resp.artifacts.Count -lt $pageSize) { break }
            $page += 1; if ($page -gt 5) { break } # safety cap
          }
        } catch {}

        $lines = @()
        $lines += $marker
        $lines += 'Fixture Drift validation failed on this PR.'
        $lines += "Status: $status (exit $exitCode)"
        $lines += ''
        $lines += "Artifacts are available on the workflow run: $runUrl"
        $lines += ''
        $lines += 'Environment quick toggles:'
        $lines += '- DETECT_LEAKS=1 — emit leak report (tests/results/pester-leak-report.json)'
        $lines += '- CLEAN_AFTER=1 — best-effort stop LabVIEW/LVCompare after run'
        $lines += '- FAIL_ON_LEAKS=1 — fail when leaks are detected'
        $lines += ''
        $lines += 'Full reference: docs/ENVIRONMENT.md'
        if ($artifactLinks.Count -gt 0) {
          $lines += ''
          $lines += 'Direct downloads:'
          foreach ($l in $artifactLinks) { $lines += "- $l" }
        }
        if ($artifactsList.Count -gt 0) {
          $lines += ''
          $lines += 'Included artifact files:'
          foreach ($a in $artifactsList) { $lines += "- $a" }
        }
        if ($sum -and (Test-Path $sum)) {
          try {
            $jj = Get-Content -LiteralPath $sum -Raw | ConvertFrom-Json
            if ($jj.files) {
              $lines += ''
              $lines += 'Files on disk:'
              foreach ($f in $jj.files) {
                $p = $f.path; $t = $f.lastWriteTimeUtc; $len = $f.length
                if ($len -ne $null) { $lines += "- $p — $t ($len bytes)" } else { $lines += "- $p — $t" }
              }
            }
          } catch {}
        }
        $body = ($lines -join "`n")
        $issueNumber = '${{ github.event.pull_request.number }}'
        $listUri = "$apiBase/repos/$owner/$repo/issues/$issueNumber/comments?per_page=100"
        $existingId = $null
        try {
          $comments = Invoke-RestMethod -Method Get -Uri $listUri -Headers $headers
          foreach ($c in $comments) {
            $login = ''
            if ($c.user -and $c.user.login) { $login = [string]$c.user.login }
            $isBot = ($login -eq 'github-actions[bot]')
            if ($c.body -and ($c.body -like "*fixture-drift-comment*") -and $isBot) { $existingId = $c.id; break }
          }
        } catch {}
        if ($existingId) {
          $patchUri = "$apiBase/repos/$owner/$repo/issues/comments/$existingId"
          $payload = @{ body = $body } | ConvertTo-Json
          Invoke-RestMethod -Method Patch -Uri $patchUri -Headers $headers -Body $payload -ContentType 'application/json'
        } else {
          $postUri = "$apiBase/repos/$owner/$repo/issues/$issueNumber/comments"
          $payload = @{ body = $body } | ConvertTo-Json
          Invoke-RestMethod -Method Post -Uri $postUri -Headers $headers -Body $payload -ContentType 'application/json'
        }

    - name: Finalize job status
      shell: pwsh
      run: |
        if ('${{ steps.orchestrate.outputs.status }}' -ne 'ok') {
          Write-Error "Fixture drift validation failed (status=${{ steps.orchestrate.outputs.status }})."
        }
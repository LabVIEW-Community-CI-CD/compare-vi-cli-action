name: PR Auto-approve

on:
  workflow_run:
    workflows:
      - Validate
    types:
      - completed

jobs:
  auto-approve:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'pull_request'
    runs-on: ubuntu-latest
    env:
      AUTO_APPROVE_TOKEN: ${{ secrets.AUTO_APPROVE_TOKEN }}
      AUTO_APPROVE_LABEL: ${{ secrets.AUTO_APPROVE_LABEL || 'auto-approve' }}
      AUTO_APPROVE_ALLOWED: ${{ secrets.AUTO_APPROVE_ALLOWED || '' }}
      GITHUB_REPO: ${{ github.repository }}
    steps:
      - name: Skip when token missing
        if: env.AUTO_APPROVE_TOKEN == ''
        run: |
          echo "AUTO_APPROVE_TOKEN is not configured; skipping auto-approval." >> "$GITHUB_STEP_SUMMARY"

      - name: Auto-approve merge-ready pull request
        if: env.AUTO_APPROVE_TOKEN != ''
        env:
          GH_TOKEN: ${{ env.AUTO_APPROVE_TOKEN }}
          EVENT_PATH: ${{ github.event_path }}
        run: |
          set -euo pipefail

          pull_number=$(jq -r '.workflow_run.pull_requests[0].number' "$EVENT_PATH")
          if [ -z "$pull_number" ] || [ "$pull_number" = "null" ]; then
            echo "No associated pull request found; exiting."
            exit 0
          fi

          pr_json=$(gh pr view "$pull_number" --json number,state,isDraft,baseRefName,isCrossRepository,author,labels --jq '.')
          state=$(echo "$pr_json" | jq -r '.state')
          base=$(echo "$pr_json" | jq -r '.baseRefName')
          is_draft=$(echo "$pr_json" | jq -r '.isDraft')
          is_cross=$(echo "$pr_json" | jq -r '.isCrossRepository')
          pr_author=$(echo "$pr_json" | jq -r '.author.login // empty')

          if [ "$state" != "OPEN" ]; then
            echo "PR #$pull_number is not open; skipping."
            exit 0
          fi
          if [ "$is_draft" = "true" ]; then
            echo "PR #$pull_number is a draft; skipping."
            exit 0
          fi
          if [ "$base" != "develop" ]; then
            echo "PR #$pull_number targets '$base' (expected develop); skipping."
            exit 0
          fi
          if [ "$is_cross" = "true" ]; then
            echo "PR #$pull_number originates from a fork; skipping."
            exit 0
          fi
          if [ -n "$AUTO_APPROVE_ALLOWED" ] && [ -n "$pr_author" ]; then
            allowed_match=0
            IFS=',' read -r -a allowed_array <<< "$AUTO_APPROVE_ALLOWED"
            for entry in "${allowed_array[@]}"; do
              trimmed=$(echo "$entry" | xargs)
              if [ -n "$trimmed" ] && [ "$trimmed" = "$pr_author" ]; then
                allowed_match=1
                break
              fi
            done
            if [ $allowed_match -ne 1 ]; then
              echo "Author '$pr_author' is not in AUTO_APPROVE_ALLOWED; skipping."
              exit 0
            fi
          fi
          if [ "$AUTO_APPROVE_LABEL" != "none" ]; then
            label_present=$(echo "$pr_json" | jq --arg label "$AUTO_APPROVE_LABEL" '[.labels[].name == $label] | any')
            if [ "$label_present" != "true" ]; then
              echo "Required label '$AUTO_APPROVE_LABEL' not found on PR #$pull_number; skipping."
              exit 0
            fi
          fi

          bot_login=$(gh api user --jq '.login')
          if [ -z "$bot_login" ]; then
            echo "Unable to determine token user; skipping."
            exit 0
          fi

          existing=$(gh pr view "$pull_number" --json reviews | jq --arg login "$bot_login" '[.reviews[] | select(.author.login==$login and .state=="APPROVED")] | length')
          if [ "$existing" -gt 0 ]; then
            echo "Approval from $bot_login already exists on PR #$pull_number; skipping."
            exit 0
          fi

          gh pr review "$pull_number" --approve --body "Auto-approval: Validate workflow completed successfully."
          echo "Submitted approval on PR #$pull_number as $bot_login."

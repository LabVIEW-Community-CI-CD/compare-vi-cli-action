name: Pester tests

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - 'scripts/**'
      - 'tools/**'
      - 'module/**'
      - 'tests/**'
      - 'action.yml'
      - 'fixtures.manifest.json'
      - 'VI*.vi'
      - 'docs/schemas/**'
  push:
    branches: [ main ]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - 'scripts/**'
      - 'tools/**'
      - 'module/**'
      - 'tests/**'
      - 'action.yml'
      - 'fixtures.manifest.json'
      - 'VI*.vi'
      - 'docs/schemas/**'
  workflow_dispatch:
    inputs:
      include_integration:
        description: "Include Integration-tagged tests (may invoke mock CLI)"
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      sample_id:
        description: 'Sampling correlation id (prevents cancels)'
        required: false
        type: string

jobs:
  normalize:
    runs-on: ubuntu-latest
    outputs:
      include_integration: ${{ steps.b.outputs.normalized }}
    steps:
      - uses: actions/checkout@v5

      - name: Apply determinism profile
        uses: ./.github/actions/determinism-profile
        with:
          strict: 'true'
      - name: Normalize include_integration
        id: b
        uses: ./.github/actions/bool-normalize
        with:
          value: ${{ inputs.include_integration || 'false' }}

  pester:
    runs-on: [self-hosted, Windows, X64]
    timeout-minutes: 3
    needs: normalize
    steps:
      - uses: actions/checkout@v5

      - name: Apply dispatcher profile
        id: dprofile
        uses: ./.github/actions/dispatcher-profile
        with:
          timeout-seconds: '150'
          emit-failures-json-always: 'true'
          detect-leaks: 'true'
          fail-on-leaks: 'false'
          kill-leaks: 'false'
          leak-grace-seconds: '3'
          clean-labview-before: 'false'
          clean-after: 'false'
          track-artifacts: 'true'

      - name: Install Pester v5
        shell: pwsh
        run: |
          Install-Module -Name Pester -RequiredVersion 5.4.0 -Force -SkipPublisherCheck -Scope CurrentUser

      - name: Run unit tests (Pester v5, repo-local)
        shell: pwsh
        run: |
          if ('${{ needs.normalize.outputs.include_integration }}' -ieq 'true') {
            ./tools/Run-Pester.ps1 -IncludeIntegration
          } else {
            ./tools/Run-Pester.ps1
          }

      - name: Publish Pester summary
        if: always()
        shell: pwsh
        run: |
          pwsh -File scripts/Write-PesterSummaryToStepSummary.ps1 -ResultsDir 'tests/results'

      - name: Validate Pester summary schema-lite (non-blocking)
        if: always()
        shell: pwsh
        continue-on-error: true
        run: |
          $json = Join-Path 'tests/results' 'pester-summary.json'
          if (Test-Path $json) {
            $schemas = @(
              'docs/schemas/pester-summary-v1_7_1.schema.json',
              'docs/schemas/pester-summary-v1_7.schema.json',
              'docs/schemas/pester-summary-v1_6.schema.json',
              'docs/schemas/pester-summary-v1_5.schema.json',
              'docs/schemas/pester-summary-v1_4.schema.json',
              'docs/schemas/pester-summary-v1_3.schema.json',
              'docs/schemas/pester-summary-v1_2.schema.json',
              'docs/schemas/pester-summary-v1_1.schema.json'
            )
            $ok = $false
            foreach($s in $schemas){
              if (Test-Path $s) {
                pwsh -File tools/Invoke-JsonSchemaLite.ps1 -JsonPath $json -SchemaPath $s
                if ($LASTEXITCODE -eq 0) { $ok=$true; break }
              }
            }
            $status = if ($ok) { 'ok' } else { 'fail' }
            if ($env:GITHUB_STEP_SUMMARY) {
              $lines = @('### Pester Summary Schema','',"- Status: $status","- File: $json")
              $lines -join "`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
            }
          } else {
            if ($env:GITHUB_STEP_SUMMARY) { "### Pester Summary Schema`n- File: (missing) $json" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8 }
          }

      - name: Ensure session index (fallback)
        if: always()
        shell: pwsh
        run: |
          pwsh -File tools/Ensure-SessionIndex.ps1 -ResultsDir 'tests/results' -SummaryJson 'pester-summary.json'

      - name: Session index post
        if: always()
        uses: ./.github/actions/session-index-post
        with:
          results-dir: tests/results
          validate-schema: true
          upload: true
          artifact-name: session-index

      - name: Append session summary
        if: always()
        shell: pwsh
        run: pwsh -File tools/Write-SessionIndexSummary.ps1 -ResultsDir 'tests/results'

      - name: Upload Pester artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-results
          path: |
            tests/results/pester-results.xml
            tests/results/pester-summary.txt
            tests/results/pester-summary.json
            tests/results/pester-artifacts.json
            tests/results/pester-artifacts-trail.json
            tests/results/pester-leak-report.json
            tests/results/session-index.json

      - name: Runner Unblock Guard
        if: always()
        uses: ./.github/actions/runner-unblock-guard
        with:
          snapshot-path: tests/results/runner-unblock-snapshot.json
          cleanup: ${{ env.UNBLOCK_GUARD == '1' }}
          process-names: 'conhost,pwsh,LabVIEW,LVCompare'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.inputs.sample_id || github.ref }}
  cancel-in-progress: true

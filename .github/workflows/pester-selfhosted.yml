name: Pester (self-hosted, real CLI)

on:
  workflow_dispatch:
    inputs:
      include_integration:
        description: 'Include Integration-tagged tests (real CLI)'
        required: false
        default: 'true'
        type: choice
        options: ['true', 'false']

jobs:
  pester:
    runs-on: [self-hosted, Windows, X64]
    env:
      LV_BASE_VI: ${{ vars.LV_BASE_VI }}
      LV_HEAD_VI: ${{ vars.LV_HEAD_VI }}
      DETECT_LEAKS: '1'
      CLEAN_AFTER: '1'
      SCAN_ARTIFACTS: '1'
    steps:
      - uses: actions/checkout@v5

      # Call the dispatcher directly (no external action dependency)
      # This dispatcher assumes Pester v5+ is pre-installed on the self-hosted runner
      - name: Run Pester tests via local dispatcher
        shell: pwsh
        run: |
          ./Invoke-PesterTests.ps1 `
            -TestsPath tests `
            -IncludeIntegration '${{ inputs.include_integration }}' `
            -ResultsPath tests/results

      - name: Append test metrics to job summary
        if: always()
        shell: pwsh
        run: |
          $json = Join-Path 'tests/results' 'pester-summary.json'
          $idx  = Join-Path 'tests/results' 'session-index.json'
          if (Test-Path $json) {
            $data = Get-Content $json -Raw | ConvertFrom-Json
            $lines = @(
              '### Pester Test Metrics',
              "- Total: $($data.total)",
              "- Passed: $($data.passed)",
              "- Failed: $($data.failed)",
              "- Errors: $($data.errors)",
              "- Skipped: $($data.skipped)",
              "- Duration (s): $($data.duration_s)",
              "- Include Integration: $($data.includeIntegration)"
            ) -join [Environment]::NewLine
            $lines | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
            if (Test-Path $idx) {
              $ix = Get-Content $idx -Raw | ConvertFrom-Json
              if ($ix.stepSummary) {
                $intro = @('','### Session Overview','') -join "`n"
                $intro | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
                $ix.stepSummary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
              } else {
                "\nSession index: tests/results/session-index.json" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
              }
            }
          } else {
            Write-Host '::warning::pester-summary.json not found.'
          }

      - name: Upload Pester artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-selfhosted-results
          path: |
            tests/results/**/*.xml
            tests/results/**/*.txt
            tests/results/**/*.html
            tests/results/pester-summary.json
            tests/results/pester-failures.json
            tests/results/pester-artifacts.json
            tests/results/pester-artifacts-trail.json
            tests/results/pester-leak-report.json
            tests/results/session-index.json

      - name: Runner Unblock Guard (process/jobs snapshot)
        if: always()
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $snap = [ordered]@{}
          try {
            $procs = @(Get-Process -ErrorAction SilentlyContinue | Where-Object { $_.ProcessName -in @('conhost','pwsh','LabVIEW','LVCompare') } | Select-Object ProcessName,Id,StartTime)
            $jobs  = @(Get-Job -ErrorAction SilentlyContinue | Select-Object Id,Name,State,HasMoreData)
            $snap.processes = $procs
            $snap.jobs = $jobs
            $outDir = Join-Path (Get-Location) 'tests/results'
            New-Item -ItemType Directory -Force -Path $outDir | Out-Null
            $path = Join-Path $outDir 'runner-unblock-snapshot.json'
            $snap | ConvertTo-Json -Depth 5 | Out-File -FilePath $path -Encoding utf8

            # Optional cleanup behind env toggle UNBLOCK_GUARD=1
            $cleanupNote = ''
            if ($env:UNBLOCK_GUARD -eq '1') {
              $stoppedLV = 0; $stoppedLVC = 0; $stoppedJobs = 0
              try { Get-Process -Name 'LabVIEW' -ErrorAction SilentlyContinue | ForEach-Object { try { Stop-Process -Id $_.Id -ErrorAction SilentlyContinue; $stoppedLV++ } catch {} } } catch {}
              try { Get-Process -Name 'LVCompare' -ErrorAction SilentlyContinue | ForEach-Object { try { Stop-Process -Id $_.Id -ErrorAction SilentlyContinue; $stoppedLVC++ } catch {} } } catch {}
              try { $gj = @(Get-Job -ErrorAction SilentlyContinue); foreach ($j in $gj) { try { Stop-Job -Job $j -ErrorAction SilentlyContinue; Remove-Job -Job $j -Force -ErrorAction SilentlyContinue; $stoppedJobs++ } catch {} } } catch {}
              $cleanupNote = ('Cleanup: LabVIEW={0}, LVCompare={1}, Jobs={2}' -f $stoppedLV,$stoppedLVC,$stoppedJobs)
            }
            $lines = @('### Runner Unblock Guard','')
            $lines += ('- Process count: {0}' -f $procs.Count)
            $lines += ('- Pester job count: {0}' -f $jobs.Count)
            $lines += ''
            $lines += ('Snapshot: {0}' -f $path)
            if ($cleanupNote) { $lines += ('- ' + $cleanupNote) }
            $lines -join "`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          } catch { Write-Host "::warning::Unblock guard failed: $_" }
      - name: Validate session index schema (schema-lite)
        if: always()
        shell: pwsh
        run: |
          $idx = 'tests/results/session-index.json'
          if (Test-Path $idx) {
            pwsh -File tools/Invoke-JsonSchemaLite.ps1 -JsonPath $idx -SchemaPath docs/schemas/session-index-v1.schema.json
            if ($LASTEXITCODE -ne 0) { Write-Host "Session index schema-lite returned code $LASTEXITCODE" }
          } else {
            Write-Host '::notice::session-index.json not present.'
          }

name: PR VI History

on:
  issue_comment:
    types:
      - created
  workflow_dispatch:
    inputs:
      pr:
        description: 'Pull request number'
        required: true
      note:
        description: 'Optional note echoed in the PR comment'
        required: false
      max_pairs:
        description: 'Maximum commit pairs per VI (default 6)'
        required: false

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: pr-vi-history-${{ github.event.issue.number || inputs.pr || github.run_id }}
  cancel-in-progress: false

jobs:
  history:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request &&
        contains(github.event.comment.body || '', '/vi-history') &&
        contains('OWNER,MEMBER,COLLABORATOR', github.event.comment.author_association)
      )
    runs-on: [self-hosted, Windows, X64]
    env:
      NOTE: ${{ inputs.note }}
      MAX_PAIRS: ${{ inputs.max_pairs || '6' }}
    steps:
      - name: Resolve pull request metadata
        id: pr
        env:
          GH_TOKEN: ${{ github.token }}
          INPUT_PR: ${{ inputs.pr }}
          COMMENT_PR: ${{ github.event.issue.number }}
          REPO_SLUG: ${{ github.repository }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $prNumber = if ($env:INPUT_PR) { $env:INPUT_PR } elseif ($env:COMMENT_PR) { $env:COMMENT_PR } else { '' }
          if (-not $prNumber) { throw 'A pull request number is required.' }

          $repoSlug = if ($env:REPO_SLUG) { $env:REPO_SLUG } elseif ($env:GITHUB_REPOSITORY) { $env:GITHUB_REPOSITORY } else { '' }
          if (-not $repoSlug) { throw 'Unable to determine repository slug.' }

          $json = gh pr view $prNumber --repo $repoSlug --json number,url,baseRefName,baseRefOid,headRefName,headRefOid,headRepositoryOwner,headRepository
          $info = $json | ConvertFrom-Json
          if (-not $info) { throw "Unable to load pull request metadata for #$prNumber" }

          $baseSha = $info.baseRefOid
          $headSha = $info.headRefOid
          $baseRef = $info.baseRefName
          $headRef = $info.headRefName

          $ownerLogin = $info.headRepositoryOwner?.login
          $repoName = $info.headRepository?.name
          if (-not $repoName) {
            $repoParts = ($env:GITHUB_REPOSITORY ?? '') -split '/'
            if ($repoParts.Length -ge 2) {
              if (-not $ownerLogin) { $ownerLogin = $repoParts[0] }
              $repoName = $repoParts[1]
            } else {
              throw 'Unable to determine head repository name.'
            }
          }
          if (-not $ownerLogin) {
            $repoParts = ($env:GITHUB_REPOSITORY ?? '') -split '/'
            if ($repoParts.Length -ge 2) {
              $ownerLogin = $repoParts[0]
            } else {
              throw 'Unable to determine head repository owner.'
            }
          }

          $headRepo = "$ownerLogin/$repoName"

          "pr_number=$prNumber" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "pr_url=$($info.url)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "base_sha=$baseSha" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "head_sha=$headSha" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "base_ref=$baseRef" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "head_ref=$headRef" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "head_repo=$headRepo" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Checkout pull request head
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          repository: ${{ steps.pr.outputs.head_repo }}
          ref: ${{ steps.pr.outputs.head_ref }}

      - name: Generate VI manifest
        id: manifest
        env:
          BASE_SHA: ${{ steps.pr.outputs.base_sha }}
          HEAD_SHA: ${{ steps.pr.outputs.head_sha }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $manifestPath = Join-Path $env:GITHUB_WORKSPACE 'vi-history-manifest.json'
          pwsh -NoLogo -NoProfile -File (Join-Path $env:GITHUB_WORKSPACE 'tools' 'Get-PRVIDiffManifest.ps1') `
            -BaseRef $env:BASE_SHA `
            -HeadRef $env:HEAD_SHA `
            -OutputPath $manifestPath

          if (-not (Test-Path -LiteralPath $manifestPath -PathType Leaf)) {
            throw "Manifest generation failed: $manifestPath not found."
          }

          $content = Get-Content -LiteralPath $manifestPath -Raw
          $pairs = 0
          if (-not [string]::IsNullOrWhiteSpace($content)) {
            try {
              $json = $content | ConvertFrom-Json -ErrorAction Stop
              if ($json -and $json.pairs -is [System.Collections.IEnumerable]) {
                $pairs = @($json.pairs).Count
              }
            } catch {
              Write-Warning ("Unable to parse manifest JSON: {0}" -f $_.Exception.Message)
            }
          }

          "manifest_path=$manifestPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "pair_count=$pairs" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Run VI history compare
        if: steps.manifest.outputs.pair_count != '0'
        id: history
        shell: pwsh
        env:
          SUMMARY_PATH: ${{ github.workspace }}\tests\results\pr-vi-history\vi-history-summary.json
          RESULTS_ROOT: ${{ github.workspace }}\tests\results\pr-vi-history
          MAX_PAIRS: ${{ env.MAX_PAIRS }}
          MANIFEST_PATH: ${{ steps.manifest.outputs.manifest_path }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $summaryPath = $env:SUMMARY_PATH
          $resultsRoot = $env:RESULTS_ROOT

          $args = @(
            '-File', (Join-Path $env:GITHUB_WORKSPACE 'tools' 'Invoke-PRVIHistory.ps1'),
            '-ManifestPath', $env:MANIFEST_PATH,
            '-ResultsRoot', $resultsRoot,
            '-SummaryPath', $summaryPath
          )
          if ($env:MAX_PAIRS) {
            $args += '-MaxPairs'
            $args += $env:MAX_PAIRS
          }

          pwsh -NoLogo -NoProfile @args

          if (Test-Path -LiteralPath $summaryPath -PathType Leaf) {
            "summary_path=$summaryPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          }
          if (Test-Path -LiteralPath $resultsRoot -PathType Container) {
            "results_root=$resultsRoot" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Summarize history results
        if: steps.manifest.outputs.pair_count != '0'
        id: summarize
        shell: pwsh
        env:
          SUMMARY_PATH: ${{ steps.history.outputs.summary_path }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          if (-not $env:SUMMARY_PATH) {
            Write-Host 'No history summary produced.'
            return
          }

          $summaryPath = $env:SUMMARY_PATH
          $summaryDir = Split-Path -Parent $summaryPath
          $markdownPath = Join-Path $summaryDir 'vi-history-summary.md'
          $expandedPath = Join-Path $summaryDir 'vi-history-summary-expanded.json'

          pwsh -NoLogo -NoProfile -File (Join-Path $env:GITHUB_WORKSPACE 'tools' 'Summarize-PRVIHistory.ps1') `
            -SummaryPath $summaryPath `
            -MarkdownPath $markdownPath `
            -OutputJsonPath $expandedPath

          "markdown_path=$markdownPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload history artifacts
        if: steps.manifest.outputs.pair_count != '0'
        uses: actions/upload-artifact@v5
        with:
          name: pr-vi-history-${{ steps.pr.outputs.pr_number }}
          path: ${{ steps.history.outputs.results_root }}/**
          if-no-files-found: warn

      - name: Post PR comment
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ steps.pr.outputs.pr_number }}
          PR_URL: ${{ steps.pr.outputs.pr_url }}
          PAIR_COUNT: ${{ steps.manifest.outputs.pair_count }}
          SUMMARY_PATH: ${{ steps.history.outputs.summary_path }}
          MARKDOWN_ENCODED: ${{ steps.summarize.outputs.markdown }}
          RESULTS_ROOT: ${{ steps.history.outputs.results_root }}
          NOTE: ${{ env.NOTE }}
          WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JOB_STATUS: ${{ job.status }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          if (-not $env:PR_NUMBER) { Write-Host 'No PR resolved; skipping comment.'; exit 0 }

          $bodyLines = [System.Collections.Generic.List[string]]::new()
          $bodyLines.Add("### VI history compare") | Out-Null
          $bodyLines.Add("") | Out-Null

          $pairCount = 0
          [void][int]::TryParse(($env:PAIR_COUNT ?? '0'), [ref]$pairCount)

          $markdown = $null
          if ($env:MARKDOWN_ENCODED) {
            $markdown = ($env:MARKDOWN_ENCODED -replace '%0A', "`n")
          }

          if ($pairCount -le 0) {
            $bodyLines.Add("No VI changes with both base/head paths were detected for this pull request.") | Out-Null
          } elseif ($markdown) {
            $bodyLines.Add(("- Compared VIs: **{0}**" -f $pairCount)) | Out-Null
            $bodyLines.Add("") | Out-Null
            $bodyLines.Add($markdown) | Out-Null
          } else {
            $bodyLines.Add(("- Compared VIs: **{0}** (summary unavailable)" -f $pairCount)) | Out-Null
            if ($env:SUMMARY_PATH) {
              $bodyLines.Add(("- Summary JSON: `{0}`" -f $env:SUMMARY_PATH)) | Out-Null
            }
          }

          if (-not [string]::IsNullOrWhiteSpace($env:NOTE)) {
            $bodyLines.Add("") | Out-Null
            $bodyLines.Add([string]::Format('> NOTE - {0}', $env:NOTE)) | Out-Null
          }

          $bodyLines.Add("") | Out-Null
          $bodyLines.Add([string]::Format('Run details: [link]({0}).', $env:WORKFLOW_URL)) | Out-Null

          if ($env:JOB_STATUS -ne 'success') {
            $bodyLines.Add("") | Out-Null
            $bodyLines.Add('> WARNING - The history workflow completed with status **{0}**. Inspect the run logs for details.' -f $env:JOB_STATUS) | Out-Null
          }

          $body = $bodyLines -join [Environment]::NewLine
          gh pr comment $env:PR_NUMBER --repo $env:GITHUB_REPOSITORY --body $body

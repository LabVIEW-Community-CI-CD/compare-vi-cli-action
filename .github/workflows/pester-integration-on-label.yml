name: Pester integration tests on PR label

on:
  pull_request:
    types: [labeled, reopened, synchronize]
    paths-ignore:
      - '**/*.md'
  workflow_dispatch:
    inputs:
      sample_id:
        description: 'Sampling correlation id (prevents cancels)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.inputs.sample_id || github.ref }}
  cancel-in-progress: true

jobs:
  pre-init:
    runs-on: ubuntu-latest
    outputs:
      docs_only: ${{ steps.d.outputs.normalized }}
    steps:
      - uses: actions/checkout@v5
      - name: Detect docs-only change
        id: detect
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Continue'
          $docsOnly = 'false'
          if ('${{ github.event_name }}' -eq 'pull_request') {
            $ownerRepo = '${{ github.repository }}'
            $pr = '${{ github.event.pull_request.number }}'
            $uri = "https://api.github.com/repos/$ownerRepo/pulls/$pr/files"
            $headers = @{ Authorization = "Bearer $env:GITHUB_TOKEN"; 'X-GitHub-Api-Version' = '2022-11-28'; Accept='application/vnd.github+json' }
            try {
              $files = Invoke-RestMethod -Method Get -Uri $uri -Headers $headers -ErrorAction Stop
              $names = @($files | ForEach-Object { $_.filename })
              if ($names.Count -gt 0) {
                $isDocs = $true
                foreach ($n in $names) {
                  $inDocs = ($n -like 'docs/**' -or $n -like '**/*.md')
                  $isSchema = ($n -like 'docs/schemas/**')
                  if (-not $inDocs -or $isSchema) { $isDocs = $false; break }
                }
                if ($isDocs) { $docsOnly = 'true' }
              }
            } catch { Write-Host '::notice::Docs-only detection skipped; treating as non-docs.' }
          }
          "docs_only=$docsOnly" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      - name: Normalize docs-only
        id: d
        uses: ./.github/actions/bool-normalize
        with:
          value: ${{ steps.detect.outputs.docs_only || 'false' }}
  preflight:
    runs-on: [self-hosted, Windows, X64]
    timeout-minutes: 3
    needs: pre-init
    if: (contains(github.event.pull_request.labels.*.name, 'test-integration') || github.event_name == 'workflow_dispatch') && needs.pre-init.outputs.docs_only != 'true'
    steps:
      - uses: actions/checkout@v5
      - name: Verify LVCompare and idle LabVIEW state
        shell: pwsh
        run: |
          $cli = 'C:\\Program Files\\National Instruments\\Shared\\LabVIEW Compare\\LVCompare.exe'
          if (-not (Test-Path -LiteralPath $cli)) {
            Write-Host "::error::LVCompare.exe not found at canonical path: $cli"; exit 1
          }
          $lv = Get-Process -Name 'LabVIEW' -ErrorAction SilentlyContinue
          if ($lv) { Write-Host "::error::LabVIEW.exe is running (PID(s): $($lv.Id -join ','))"; exit 1 }
          Write-Host 'Preflight OK: LVCompare present; LabVIEW not running.'

  pester-integration:
    if: contains(github.event.pull_request.labels.*.name, 'test-integration') && needs.pre-init.outputs.docs_only != 'true'
    runs-on: [self-hosted, Windows, X64]
    needs: [pre-init, preflight]
    timeout-minutes: 3
    env:
      UNBLOCK_GUARD: '1'
      WATCH_CONSOLE: '1'
    steps:
      - uses: actions/checkout@v5
      - name: Prepare fixture copies (base/head)
        id: fixtures
        uses: ./.github/actions/prepare-fixtures
      - name: Export fixture env for tests
        shell: pwsh
        run: |
          "LV_BASE_VI=${{ steps.fixtures.outputs.base }}" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "LV_HEAD_VI=${{ steps.fixtures.outputs.head }}" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Validate environment
        shell: pwsh
        run: |
          $errors = @()
          
          # Check for LabVIEW Compare CLI
          $cliPath = 'C:\Program Files\National Instruments\Shared\LabVIEW Compare\LVCompare.exe'
          if (-not (Test-Path -LiteralPath $cliPath)) {
            $errors += "LVCompare.exe not found at canonical path: $cliPath"
            $errors += "Install LabVIEW 2025 Q3 or later with LabVIEW Compare CLI"
          }
          
          # Check for environment variables
          if (-not $env:LV_BASE_VI) {
            $errors += "LV_BASE_VI environment variable not set"
            $errors += "Set repository variable LV_BASE_VI in Settings -> Secrets and variables -> Actions -> Variables"
          } elseif (-not (Test-Path -LiteralPath $env:LV_BASE_VI)) {
            $errors += "LV_BASE_VI points to non-existent file: $env:LV_BASE_VI"
          }
          
          if (-not $env:LV_HEAD_VI) {
            $errors += "LV_HEAD_VI environment variable not set"
            $errors += "Set repository variable LV_HEAD_VI in Settings -> Secrets and variables -> Actions -> Variables"
          } elseif (-not (Test-Path -LiteralPath $env:LV_HEAD_VI)) {
            $errors += "LV_HEAD_VI points to non-existent file: $env:LV_HEAD_VI"
          }
          
          if ($errors.Count -gt 0) {
            Write-Host "Environment validation failed:"
            $errors | ForEach-Object { Write-Host "  - $_" }
            Write-Host ""
            Write-Host "See docs/SELFHOSTED_CI_SETUP.md for setup instructions"
            exit 1
          }
          
          Write-Host "Environment validation passed:"
          Write-Host "  - CLI: $cliPath"
          Write-Host "  - LV_BASE_VI: $env:LV_BASE_VI"
          Write-Host "  - LV_HEAD_VI: $env:LV_HEAD_VI"

      - name: Install Pester v5
        shell: pwsh
        run: |
          Install-Module -Name Pester -RequiredVersion 5.4.0 -Force -SkipPublisherCheck -Scope CurrentUser

      - name: Run Pester integration tests
        shell: pwsh
        run: |
          ./tools/Run-Pester.ps1 -IncludeIntegration

      - name: Upload Pester artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-integration-results
          path: |
            tests/results/**/*.xml
            tests/results/**/*.txt

      - name: Session index post
        if: always()
        uses: ./.github/actions/session-index-post
        with:
          results-dir: tests/results
          validate-schema: true
          upload: true
          artifact-name: pester-integration-session-index

      - name: Validate session index schema (schema-lite, if present)
        if: always()
        shell: pwsh
        run: |
          $idx = 'tests/results/session-index.json'
          if (Test-Path $idx) {
            pwsh -File tools/Invoke-JsonSchemaLite.ps1 -JsonPath $idx -SchemaPath docs/schemas/session-index-v1.schema.json
            if ($LASTEXITCODE -ne 0) { Write-Host "Session index schema-lite returned code $LASTEXITCODE" }
          } else {
            Write-Host '::notice::session-index.json not present in label-triggered integration run.'
          }

      - name: Runner Unblock Guard
        if: always()
        uses: ./.github/actions/runner-unblock-guard
        with:
          snapshot-path: tests/results/runner-unblock-snapshot.json
          cleanup: ${{ env.UNBLOCK_GUARD == '1' }}
          process-names: 'conhost,pwsh,LabVIEW,LVCompare'

      - name: Comment results on PR (using XCLI_PAT)
        if: always()
        shell: pwsh
        env:
          GH_REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          XCLI_PAT: ${{ secrets.XCLI_PAT }}
        run: |
          if (-not $env:XCLI_PAT) { Write-Host 'XCLI_PAT not available; skipping comment.'; exit 0 }
          $summaryPath = './tests/results/pester-summary.txt'
          $jsonSummaryPath = Join-Path $env:RUNNER_TEMP 'compare-summary.json'
          $durationSeconds = $null
          $durationNanoseconds = $null
          # Prefer JSON summary (more reliable) if present
          if (Test-Path $jsonSummaryPath) {
            try {
              $json = Get-Content $jsonSummaryPath -Raw | ConvertFrom-Json -ErrorAction Stop
              if ($null -ne $json.compareDurationSeconds) { $durationSeconds = [string]$json.compareDurationSeconds }
              if ($null -ne $json.compareDurationNanoseconds) { $durationNanoseconds = [string]$json.compareDurationNanoseconds }
            } catch {
              Write-Host "Failed to parse JSON summary: $_"
            }
          }
          if (Test-Path $summaryPath) {
            $summary = Get-Content $summaryPath -Raw
            # Fallback extraction from text only if JSON values missing
            if (-not $durationSeconds -or -not $durationNanoseconds) {
              foreach ($line in ($summary -split "`n")) {
                if (-not $durationSeconds -and $line -match 'Duration \(s\):\s*([0-9]+\.[0-9]+|[0-9]+)') { $durationSeconds = $Matches[1] }
                if (-not $durationNanoseconds -and $line -match 'Duration \(ns\):\s*([0-9]+)') { $durationNanoseconds = $Matches[1] }
              }
            }
          } else {
            $summary = 'Results not available'
          }
          $timingBlock = ''
          if ($durationSeconds -or $durationNanoseconds) {
            $timingLines = @('','Timing:')
            if ($durationSeconds) { $timingLines += ('- Seconds: ' + $durationSeconds) }
            if ($durationNanoseconds) { $timingLines += ('- Nanoseconds: ' + $durationNanoseconds) }
            # Derived milliseconds for quick readability
            if ($durationSeconds) {
              try {
                $ms = [math]::Round([double]$durationSeconds * 1000, 2)
                $timingLines += ('- Combined: ' + $durationSeconds + 's (' + $ms + ' ms)')
              } catch { }
            }
            $timingBlock = ($timingLines -join "`n")
          }
          $lines = @(
            '### Pester integration test results (label-triggered)',
            '',
            '```',
            $summary,
            '```'
          )
          if ($timingBlock) { $lines += $timingBlock }
          $lines = $lines -join "`n"
          $payload = @{ body = $lines } | ConvertTo-Json -Compress
          $headers = @{ Authorization = "Bearer $env:XCLI_PAT"; Accept = 'application/vnd.github+json'; 'User-Agent' = 'xcli-bot' }
          $uri = "https://api.github.com/repos/$env:GH_REPO/issues/$env:PR_NUMBER/comments"
          Invoke-RestMethod -Method POST -Uri $uri -Headers $headers -ContentType 'application/json' -Body $payload

  integration-docs-only:
    needs: pre-init
    if: contains(github.event.pull_request.labels.*.name, 'test-integration') && needs.pre-init.outputs.docs_only == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Append summary (docs-only)
        shell: pwsh
        run: |
          if ($env:GITHUB_STEP_SUMMARY) {
            $lines = @('### Pester Integration (soft-skip)','')
            $lines += '- Reason: docs-only change detected'
            $lines -join "`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          }

name: PR VI Compare Staging

on:
  issue_comment:
    types:
      - created
  workflow_dispatch:
    inputs:
      pr:
        description: 'Pull request number'
        required: true
      note:
        description: 'Optional note that will be echoed in the run summary'
        required: false
      label_name:
        description: 'Label to apply when staging succeeds (defaults to vi-staging-ready)'
        required: false

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: pr-vi-staging-${{ github.event.issue.number || inputs.pr || github.run_id }}
  cancel-in-progress: false

jobs:
  stage:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request &&
        contains(github.event.comment.body || '', '/vi-stage') &&
        contains('OWNER,MEMBER,COLLABORATOR', github.event.comment.author_association)
      )
    runs-on: [self-hosted, Windows, X64]
    env:
      NOTE: ${{ inputs.note }}
      STAGING_LABEL: ${{ inputs.label_name || 'vi-staging-ready' }}
    steps:
      - name: Resolve pull request metadata
        id: pr
        env:
          GH_TOKEN: ${{ github.token }}
          INPUT_PR: ${{ inputs.pr }}
          COMMENT_PR: ${{ github.event.issue.number }}
          REPO_SLUG: ${{ github.repository }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $prNumber = if ($env:INPUT_PR) { $env:INPUT_PR } elseif ($env:COMMENT_PR) { $env:COMMENT_PR } else { '' }
          if (-not $prNumber) {
            throw 'A pull request number is required (workflow_dispatch input or issue comment).'
          }

          Write-Host "Resolving metadata for PR #$prNumber"
          $repoSlug = $env:REPO_SLUG
          if (-not $repoSlug) {
            $repoSlug = $env:GITHUB_REPOSITORY
          }
          if (-not $repoSlug) {
            throw 'Unable to determine repository slug for gh commands.'
          }

          $json = gh pr view $prNumber --repo $repoSlug --json number,url,baseRefName,baseRefOid,headRefName,headRefOid,headRepositoryOwner,headRepository
          $info = $json | ConvertFrom-Json

          if (-not $info) {
            throw "Unable to load pull request metadata for #$prNumber"
          }

          $baseSha = $info.baseRefOid
          $headSha = $info.headRefOid
          $baseRef = $info.baseRefName
          $headRef = $info.headRefName

          $ownerLogin = $info.headRepositoryOwner?.login
          $repoName = $info.headRepository?.name

          if (-not $repoName) {
            $repoParts = ($env:GITHUB_REPOSITORY ?? '') -split '/'
            if ($repoParts.Length -ge 2) {
              if (-not $ownerLogin) { $ownerLogin = $repoParts[0] }
              $repoName = $repoParts[1]
            } else {
              throw 'Unable to determine head repository name.'
            }
          }

          if (-not $ownerLogin) {
            $repoParts = ($env:GITHUB_REPOSITORY ?? '') -split '/'
            if ($repoParts.Length -ge 2) {
              $ownerLogin = $repoParts[0]
            } else {
              throw 'Unable to determine head repository owner.'
            }
          }

          $headRepo = "$ownerLogin/$repoName"

          "pr_number=$prNumber" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "pr_url=$($info.url)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "base_sha=$baseSha" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "head_sha=$headSha" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "base_ref=$baseRef" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "head_ref=$headRef" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "head_repo=$headRepo" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Checkout pull request head
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: ${{ steps.pr.outputs.head_repo }}
          ref: ${{ steps.pr.outputs.head_ref }}

      - name: Generate VI manifest
        id: manifest
        shell: pwsh
        env:
          BASE_SHA: ${{ steps.pr.outputs.base_sha }}
          HEAD_SHA: ${{ steps.pr.outputs.head_sha }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $repoRoot = Get-Location
          $artifactsDir = Join-Path $repoRoot 'vi-compare-artifacts'
          New-Item -ItemType Directory -Path $artifactsDir -Force | Out-Null

          $manifestPath = Join-Path $artifactsDir 'vi-manifest.json'
          & "$repoRoot\tools\Get-PRVIDiffManifest.ps1" -BaseRef $env:BASE_SHA -HeadRef $env:HEAD_SHA -OutputPath $manifestPath | Out-Null

          "artifacts_dir=$artifactsDir" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "manifest_path=$manifestPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Stage VI bundles
        id: stage
        shell: pwsh
        env:
          MANIFEST_PATH: ${{ steps.manifest.outputs.manifest_path }}
          ARTIFACTS_DIR: ${{ steps.manifest.outputs.artifacts_dir }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $repoRoot = Get-Location
          $artifactsDir = if ($env:ARTIFACTS_DIR) { $env:ARTIFACTS_DIR } else { Join-Path $repoRoot 'vi-compare-artifacts' }
          New-Item -ItemType Directory -Path $artifactsDir -Force | Out-Null

          if (-not $env:MANIFEST_PATH) {
            throw 'Manifest path was not provided.'
          }

          $stagingWorkRoot = Join-Path $repoRoot 'vi-staging-work'
          New-Item -ItemType Directory -Path $stagingWorkRoot -Force | Out-Null

          Write-Host "[stage] Manifest path: $env:MANIFEST_PATH"
          Write-Host "[stage] Staging work root: $stagingWorkRoot"
          $results = & "$repoRoot\tools\Invoke-PRVIStaging.ps1" -ManifestPath $env:MANIFEST_PATH -WorkingRoot $stagingWorkRoot
          if (-not $results) {
            $results = @()
          }

          $stagedCount = 0
          $skippedCount = 0
          $totalCount = $results.Count
          $allowSameLeafCount = 0
          $modeCounts = @{}
          Write-Host ("[stage] Processed manifest with {0} candidate pair(s)." -f $totalCount)

          $exportDir = Join-Path $repoRoot 'vi-staging-artifacts'
          New-Item -ItemType Directory -Path $exportDir -Force | Out-Null

          $counter = 1
          foreach ($entry in $results) {
            $basePath = $entry.basePath
            $headPath = $entry.headPath

            if ($entry.staged -and $entry.staged.Root -and (Test-Path -LiteralPath $entry.staged.Root -PathType Container)) {
              $stagedRoot = $entry.staged.Root
              $stagedBase = $entry.staged.Base
              $stagedHead = $entry.staged.Head
              $stageMode = $entry.staged.Mode
              $modeKey = if ($stageMode) { $stageMode } else { 'unknown' }
              if (-not $modeCounts.ContainsKey($modeKey)) { $modeCounts[$modeKey] = 0 }
              $modeCounts[$modeKey]++

              $allowSameLeaf = $false
              if ($entry.staged.PSObject.Properties['AllowSameLeaf']) {
                try { $allowSameLeaf = [bool]$entry.staged.AllowSameLeaf } catch { $allowSameLeaf = $false }
              }
              if ($allowSameLeaf) { $allowSameLeafCount++ }

              $zipName = 'vi-staging-{0:D2}.zip' -f $counter
              $zipPath = Join-Path $exportDir $zipName
              if (Test-Path -LiteralPath $zipPath) {
                Remove-Item -LiteralPath $zipPath -Force
              }
              Compress-Archive -Path (Join-Path $entry.staged.Root '*') -DestinationPath $zipPath -Force
              Add-Member -InputObject $entry -NotePropertyName artifact -NotePropertyValue $zipName -Force
              $stagedCount++
              $zipSizeKB = try { [math]::Round((Get-Item -LiteralPath $zipPath).Length / 1KB, 1) } catch { 0 }
              Write-Host ("[stage] Staged pair {0:D2}: change={1} base='{2}' head='{3}' mode={4} allowSameLeaf={5} root='{6}' artifact='{7}' sizeKB={8} stagedBase='{9}' stagedHead='{10}'" -f $counter, $entry.changeType, $basePath, $headPath, $modeKey, $allowSameLeaf, $stagedRoot, $zipName, $zipSizeKB, $stagedBase, $stagedHead)
              $counter++
            } else {
              $skippedCount++
              if (-not $entry.PSObject.Properties['skipReason']) {
                $reason = 'No staged output generated'
                Add-Member -InputObject $entry -NotePropertyName skipReason -NotePropertyValue $reason -Force
              }
              $reasonText = $entry.skipReason
              if (-not $reasonText -and $entry.staged -and $entry.staged.Root) {
                $reasonText = "staged root missing at $($entry.staged.Root)"
                Add-Member -InputObject $entry -NotePropertyName skipReason -NotePropertyValue $reasonText -Force
              }
              $artifactHint = if ($entry.artifact) { $entry.artifact } else { 'n/a' }
              $stagedRoot = if ($entry.staged) { $entry.staged.Root } else { '' }
              Write-Warning ("[stage] Skipped pair: change={0} base='{1}' head='{2}' stagedRoot='{3}' artifact='{4}' reason='{5}'" -f $entry.changeType, $basePath, $headPath, $stagedRoot, $artifactHint, ($entry.skipReason ?? 'unknown'))
            }
          }

          $resultsPath = Join-Path $artifactsDir 'vi-staging-results.json'
          $results | ConvertTo-Json -Depth 6 | Set-Content -LiteralPath $resultsPath -Encoding utf8

          "results_path=$resultsPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "artifact_dir=$exportDir" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "stage_count=$($results.Count)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "stage_staged=$stagedCount" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "stage_skipped=$skippedCount" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "stage_allow_same_leaf=$allowSameLeafCount" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          if ($modeCounts.Keys.Count -gt 0) {
            $modeSummary = ($modeCounts.GetEnumerator() | ForEach-Object { "$($_.Key):$($_.Value)" }) -join ','
            "stage_mode_counts=$modeSummary" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

          $modeSummaryText = if ($modeCounts.Keys.Count -gt 0) { ($modeCounts.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" } | Sort-Object) -join ', ' } else { 'none' }
          Write-Host ("[stage] Summary: staged={0} skipped={1} allowSameLeaf={2} modes=[{3}] artifactsDir='{4}' results='{5}'" -f $stagedCount, $skippedCount, $allowSameLeafCount, $modeSummaryText, $exportDir, $resultsPath)

      - name: Run LVCompare on staged pairs
        id: compare
        shell: pwsh
        env:
          RESULTS_PATH: ${{ steps.stage.outputs.results_path }}
          ARTIFACTS_DIR: ${{ steps.manifest.outputs.artifacts_dir }}
          VI_STAGE_COMPARE_FLAGS_MODE: ${{ vars.VI_STAGE_COMPARE_FLAGS_MODE }}
          VI_STAGE_COMPARE_FLAGS: ${{ vars.VI_STAGE_COMPARE_FLAGS }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          if (-not $env:RESULTS_PATH -or -not (Test-Path -LiteralPath $env:RESULTS_PATH -PathType Leaf)) {
            Write-Host 'No staged pairs to compare.'
            if ($Env:GITHUB_OUTPUT) {
              "compare_json=" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
              "compare_dir=" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
              "diff_count=0" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
              "match_count=0" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
              "skip_count=0" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
              "error_count=0" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            }
            exit 0
          }

          $scriptPath = Join-Path (Get-Location) 'tools' 'Run-StagedLVCompare.ps1'
          if (-not (Test-Path -LiteralPath $scriptPath -PathType Leaf)) {
            throw "Run-StagedLVCompare.ps1 not found at $scriptPath"
          }

          & $scriptPath -ResultsPath $env:RESULTS_PATH -ArtifactsDir $env:ARTIFACTS_DIR -RenderReport

      - name: Generate staging summary
        id: summary
        shell: pwsh
        env:
          RESULTS_PATH: ${{ steps.stage.outputs.results_path }}
          ARTIFACTS_DIR: ${{ steps.manifest.outputs.artifacts_dir }}
          COMPARE_JSON: ${{ steps.compare.outputs.compare_json }}
          COMPARE_DIR: ${{ steps.compare.outputs.compare_dir }}
          STAGE_COUNT: ${{ steps.stage.outputs.stage_count }}
          STAGE_STAGED: ${{ steps.stage.outputs.stage_staged }}
          STAGE_SKIPPED: ${{ steps.stage.outputs.stage_skipped }}
          STAGE_ALLOW_SAME_LEAF: ${{ steps.stage.outputs.stage_allow_same_leaf }}
          STAGE_MODE_COUNTS: ${{ steps.stage.outputs.stage_mode_counts }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          if (-not $env:ARTIFACTS_DIR) {
            throw 'Artifacts directory path missing.'
          }

          $summaryPath = Join-Path $env:ARTIFACTS_DIR 'vi-staging-summary.md'
          $compareMarkdownPath = $null
          $compareSummaryPath = $null

          $results = @()
          if ($env:RESULTS_PATH -and (Test-Path -LiteralPath $env:RESULTS_PATH -PathType Leaf)) {
            $json = Get-Content -LiteralPath $env:RESULTS_PATH -Raw
            if ($json) {
              $results = $json | ConvertFrom-Json
            }
          }

          $compareTotals = @{
            diff    = 0
            match   = 0
            error   = 0
            skipped = 0
          }

          $compareSummary = $null
          $comparePairsByIndex = @{}
          if ($env:COMPARE_JSON -and (Test-Path -LiteralPath $env:COMPARE_JSON -PathType Leaf)) {
            $summarizePath = Join-Path (Get-Location) 'tools' 'Summarize-VIStaging.ps1'
            if (-not (Test-Path -LiteralPath $summarizePath -PathType Leaf)) {
              throw "Summarize-VIStaging.ps1 not found at $summarizePath"
            }
            $compareMarkdownPath = Join-Path $env:ARTIFACTS_DIR 'vi-staging-compare.md'
            $compareSummaryPath = Join-Path $env:ARTIFACTS_DIR 'vi-staging-compare-summary.json'
            $compareSummary = & $summarizePath -CompareJson $env:COMPARE_JSON -MarkdownPath $compareMarkdownPath -SummaryJsonPath $compareSummaryPath
            if ($compareSummary -and $compareSummary.totals) {
              foreach ($key in @('diff','match','error','skipped')) {
                if ($compareSummary.totals.PSObject.Properties[$key]) {
                  $rawValue = $compareSummary.totals.$key
                  $parsed = 0
                  if ([int]::TryParse([string]$rawValue, [ref]$parsed)) {
                    $compareTotals[$key] = $parsed
                  } elseif ($rawValue -ne $null) {
                    try { $compareTotals[$key] = [int]$rawValue } catch {}
                  }
                }
              }
            }
            if ($compareSummary -and $compareSummary.pairs) {
              foreach ($pair in $compareSummary.pairs) {
                if ($pair -and $pair.PSObject.Properties['index'] -and $pair.index -ne $null) {
                  $indexKey = [int]$pair.index
                  $comparePairsByIndex[$indexKey] = $pair
                }
              }
            }
          }

          $lines = @()
          if (-not $results) {
            $lines += 'No VI pairs with both base/head paths were staged.'
          } else {
            $lines += ("Total staged pairs: {0}" -f $results.Count)
            if ($env:STAGE_STAGED) {
              $lines += ("Staged bundles: {0}" -f $env:STAGE_STAGED)
            }
            if ($env:STAGE_SKIPPED) {
              $lines += ("Skipped bundles: {0}" -f $env:STAGE_SKIPPED)
            }
            if ($env:STAGE_ALLOW_SAME_LEAF) {
              $lines += ("AllowSameLeaf pairs: {0}" -f $env:STAGE_ALLOW_SAME_LEAF)
            }
            if ($env:STAGE_MODE_COUNTS) {
              $lines += ("Staging modes: {0}" -f $env:STAGE_MODE_COUNTS.Replace(',', ', '))
            }
          }

          if ($compareSummary -and $compareSummary.markdown) {
            $lines += ''
            $lines += '### LVCompare breakdown'
            $lines += ''
            $lines += $compareSummary.markdown
          } elseif ($env:COMPARE_JSON) {
            $lines += ''
            $lines += '### LVCompare breakdown'
            $lines += ''
            $lines += 'No LVCompare comparisons were recorded.'
          }

          if ($results) {
            $lines += ''
            $lines += '### Staged bundle catalog'
            $lines += ''
            $table = @(
              '| # | Change | Base | Head | Mode | AllowSameLeaf | Artifact | Compare |',
              '| - | ------ | ---- | ---- | ---- | ------------- | -------- | ------- |'
            )

            $useFallbackCounts = -not $compareSummary
            $idx = 1
            foreach ($entry in $results) {
              $compareStatus = 'n/a'
              $compareDisplay = 'n/a'
              $pairInfo = $null
              if ($comparePairsByIndex.ContainsKey($idx)) {
                $pairInfo = $comparePairsByIndex[$idx]
              }

              if ($pairInfo) {
                $compareStatus = $pairInfo.status
                $compareDisplay = $compareStatus
                if ($pairInfo.reportRelative) {
                  $reportRel = ($pairInfo.reportRelative -replace '\\','/')
                  $compareDisplay = "$compareStatus (`$reportRel`)"
                } elseif ($pairInfo.reportPath) {
                  $compareDisplay = "$compareStatus (`$($pairInfo.reportPath)`)"
                }
              } elseif ($entry.PSObject.Properties['compare'] -and $entry.compare) {
                $compareStatus = $entry.compare.status
                if ($entry.compare.status -eq 'diff' -and $entry.compare.reportPath) {
                  $reportRel = $entry.compare.reportPath
                  if ($env:COMPARE_DIR) {
                    try {
                      $reportRel = [System.IO.Path]::GetRelativePath($env:COMPARE_DIR, $entry.compare.reportPath)
                    } catch {}
                  }
                  $compareDisplay = "$($entry.compare.status) (`$($reportRel -replace '\\','/')`)"
                } else {
                  $compareDisplay = $compareStatus
                }
              }

              if ($useFallbackCounts) {
                switch ($compareStatus) {
                  'diff'    { $compareTotals.diff++ }
                  'match'   { $compareTotals.match++ }
                  'error'   { $compareTotals.error++ }
                  'skipped' { $compareTotals.skipped++ }
                  default   { if ($compareStatus) { $compareTotals.skipped++ } }
                }
              }

              $artifactCell = if ($entry.artifact) { $entry.artifact } else { 'n/a' }
              $stageMode = if ($entry.staged) { $entry.staged.Mode } else { '' }
              $allowSameLeaf = $false
              if ($entry.staged -and $entry.staged.PSObject.Properties['AllowSameLeaf']) {
                try { $allowSameLeaf = [bool]$entry.staged.AllowSameLeaf } catch { $allowSameLeaf = $false }
              }
              $allowText = if ($allowSameLeaf) { 'Yes' } else { 'No' }

              $baseDisplay = $entry.basePath
              $headDisplay = $entry.headPath
              $stagedBasePath = $null
              $stagedHeadPath = $null
              if ($entry.staged) {
                if ($entry.staged.PSObject.Properties['Base']) {
                  $stagedBasePath = $entry.staged.Base
                }
                if ($entry.staged.PSObject.Properties['Head']) {
                  $stagedHeadPath = $entry.staged.Head
                }
              }
              if ($stagedBasePath) {
                if ($baseDisplay -and -not [string]::Equals($baseDisplay, $stagedBasePath, [System.StringComparison]::OrdinalIgnoreCase)) {
                  $baseDisplay = "$baseDisplay -> $stagedBasePath"
                } else {
                  $baseDisplay = $stagedBasePath
                }
              }
              if ($stagedHeadPath) {
                if ($headDisplay -and -not [string]::Equals($headDisplay, $stagedHeadPath, [System.StringComparison]::OrdinalIgnoreCase)) {
                  $headDisplay = "$headDisplay -> $stagedHeadPath"
                } else {
                  $headDisplay = $stagedHeadPath
                }
              }

              $table += "| $idx | $($entry.changeType) | $baseDisplay | $headDisplay | $stageMode | $allowText | $artifactCell | $compareDisplay |"
              $idx++
            }

            $lines += $table
          }

          $lines -join "`n" | Set-Content -LiteralPath $summaryPath -Encoding utf8

          "summary_path=$summaryPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          if ($compareMarkdownPath) {
            "compare_markdown_path=$compareMarkdownPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          }
          if ($compareSummaryPath) {
            "compare_summary_json=$compareSummaryPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          }
          if ($Env:GITHUB_OUTPUT) {
            "diff_count=$($compareTotals.diff)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            "match_count=$($compareTotals.match)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            "error_count=$($compareTotals.error)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            "skip_count=$($compareTotals.skipped)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Ensure staging label exists
        if: steps.stage.outputs.stage_count != '0'
        env:
          GH_TOKEN: ${{ github.token }}
          STAGING_LABEL: ${{ env.STAGING_LABEL }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
          if (-not $env:STAGING_LABEL) { return }
          gh label create $env:STAGING_LABEL --color FFC82C --description "PR has VI staging bundles ready" 2>$null
          gh label edit $env:STAGING_LABEL --color FFC82C --description "PR has VI staging bundles ready"

      - name: Upload manifest & summary
        uses: actions/upload-artifact@v4
        with:
          name: vi-compare-manifest
          path: vi-compare-artifacts/

      - name: Upload staged bundles
        if: steps.stage.outputs.stage_count != '0'
        uses: actions/upload-artifact@v4
        with:
          name: vi-compare-staging
          path: ${{ steps.stage.outputs.artifact_dir }}

      - name: Collect artifact download links
        id: collect_links
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $targetNames = @('vi-compare-manifest', 'vi-compare-staging')
          $raw = gh api "repos/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID/artifacts" --paginate --jq '.artifacts[] | @json'
          $artifacts = @()
          if ($raw) {
            foreach ($line in ($raw -split "`n")) {
              if ($line) {
                $artifacts += ($line | ConvertFrom-Json)
              }
            }
          }

          $links = @()
          foreach ($name in $targetNames) {
            $artifact = $artifacts | Where-Object { $_.name -eq $name } | Select-Object -First 1
            if ($artifact) {
              $downloadUrl = gh api "repos/$env:GITHUB_REPOSITORY/actions/artifacts/$($artifact.id)" --jq '.archive_download_url'
              if ($downloadUrl) {
                $links += [pscustomobject]@{
                  name = $name
                  url  = $downloadUrl
                  size = $artifact.size_in_bytes
                }
              }
            }
          }

          $linksJson = ($links | ConvertTo-Json -Depth 4)
          $linksPath = Join-Path (Get-Location) 'vi-compare-artifacts/vi-staging-links.json'
          if ($links.Count -gt 0 -and $linksJson) {
            $linksJson | Set-Content -LiteralPath $linksPath -Encoding utf8
            $block = "artifact_links<<EOF`n$linksJson`nEOF"
            $block | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            "artifact_links_path=$linksPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            "artifact_links=[]" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Append job summary
        shell: pwsh
        env:
          SUMMARY_PATH: ${{ steps.summary.outputs.summary_path }}
          NOTE: ${{ env.NOTE }}
          ARTIFACT_LINKS: ${{ steps.collect_links.outputs.artifact_links }}
        run: |
          $summary = Get-Content $env:SUMMARY_PATH -Raw
          $lines = @('## VI Compare Staging Summary', '')
          if ($env:NOTE) {
            $lines += "Note: $($env:NOTE)"
            $lines += ''
          }
          $lines += $summary
          $lines += ''
          if ($env:ARTIFACT_LINKS) {
            $parsedLinks = $env:ARTIFACT_LINKS | ConvertFrom-Json
            if ($parsedLinks) {
              $links = @()
              if ($parsedLinks -is [System.Collections.IEnumerable] -and -not ($parsedLinks -is [string])) {
                $links = @($parsedLinks)
              } else {
                $links = @($parsedLinks)
              }
              if ($links.Count -gt 0) {
                $lines += '### Download Links (expire ~1 hour)'
                foreach ($link in $links) {
                  if (-not $link) { continue }
                  $name = if ($link.PSObject.Properties['name']) { $link.name } else { $null }
                  $url  = if ($link.PSObject.Properties['url']) { $link.url } else { $null }
                  if (-not $name -or -not $url) { continue }
                  $size = $null
                  if ($link.PSObject.Properties['size'] -and $link.size -ne $null) {
                    try { $size = [math]::Round(($link.size/1KB), 1) } catch { $size = $null }
                  }
                  $suffix = if ($size) { " (${size} KB)" } else { '' }
                  $lines += "- [$name]($url)$suffix"
                }
                $lines += ''
              }
            }
          }
          $lines += "Artifacts: [Run $env:GITHUB_RUN_ID](https://github.com/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID)"
          $lines -join "`n" | Out-File -FilePath $Env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

      - name: Apply staging label
        if: steps.stage.outputs.stage_count != '0'
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ steps.pr.outputs.pr_number }}
          STAGING_LABEL: ${{ env.STAGING_LABEL }}
          REPO_SLUG: ${{ github.repository }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
          if (-not $env:STAGING_LABEL) { return }
          if (-not $env:PR_NUMBER) { return }
          $repoSlug = $env:REPO_SLUG
          if (-not $repoSlug) { $repoSlug = $env:GITHUB_REPOSITORY }
          if (-not $repoSlug) { throw 'Unable to determine repository slug for gh commands.' }
          & gh pr edit $env:PR_NUMBER --repo $repoSlug --add-label "$env:STAGING_LABEL"
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Failed to add label '$env:STAGING_LABEL' to PR #$env:PR_NUMBER (exit code $LASTEXITCODE)."
            $global:LASTEXITCODE = 0
          }

      - name: Comment with results
        if: github.event_name == 'issue_comment' || github.event_name == 'workflow_dispatch'
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ steps.pr.outputs.pr_number }}
          SUMMARY_PATH: ${{ steps.summary.outputs.summary_path }}
          STAGE_COUNT: ${{ steps.stage.outputs.stage_count }}
          STAGE_STAGED: ${{ steps.stage.outputs.stage_staged }}
          STAGE_SKIPPED: ${{ steps.stage.outputs.stage_skipped }}
          STAGE_ALLOW_SAME_LEAF: ${{ steps.stage.outputs.stage_allow_same_leaf }}
          STAGE_MODE_COUNTS: ${{ steps.stage.outputs.stage_mode_counts }}
          COMPARE_MATCH: ${{ steps.compare.outputs.match_count }}
          COMPARE_DIFF: ${{ steps.compare.outputs.diff_count }}
          COMPARE_ERROR: ${{ steps.compare.outputs.error_count }}
          COMPARE_SKIP: ${{ steps.compare.outputs.skip_count }}
          ARTIFACT_LINKS: ${{ steps.collect_links.outputs.artifact_links }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REPO_SLUG: ${{ github.repository }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          if (-not $env:PR_NUMBER) { return }

          $runUrl = "https://github.com/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"
          $summary = Get-Content $env:SUMMARY_PATH -Raw

          $stageTotal = 0
          $stageStaged = 0
          $stageSkipped = 0
          [void][int]::TryParse(($env:STAGE_COUNT ?? '0'), [ref]$stageTotal)
          [void][int]::TryParse(($env:STAGE_STAGED ?? '0'), [ref]$stageStaged)
          [void][int]::TryParse(($env:STAGE_SKIPPED ?? '0'), [ref]$stageSkipped)

          $allowSameLeaf = if ($env:STAGE_ALLOW_SAME_LEAF) { $env:STAGE_ALLOW_SAME_LEAF } else { '0' }
          $modeSummary = if ($env:STAGE_MODE_COUNTS) { $env:STAGE_MODE_COUNTS.Replace(',', ', ') } else { 'n/a' }

          $compareLine = $null
          if ($env:COMPARE_MATCH -or $env:COMPARE_DIFF -or $env:COMPARE_ERROR -or $env:COMPARE_SKIP) {
            $compareLine = ("LVCompare results: match {0}, diff {1}, error {2}, skipped {3}" -f `
              ($env:COMPARE_MATCH ?? '0'), ($env:COMPARE_DIFF ?? '0'), ($env:COMPARE_ERROR ?? '0'), ($env:COMPARE_SKIP ?? '0'))
          }

          if ($stageTotal -gt 0) {
            $bodyLines = @(
              "### VI Compare Staging",
              '',
              "- Pairs staged: **$stageStaged** / $stageTotal (skipped: $stageSkipped)",
              "- AllowSameLeaf bundles: $allowSameLeaf",
              "- Staging modes: $modeSummary",
              "- Compare categories: see table for attribute/block diagram/front panel hits"
            )
            if ($compareLine) { $bodyLines += $compareLine }
            $bodyLines += ''
            $bodyLines += '<details><summary>Staging table</summary>'
            $bodyLines += ''
            $bodyLines += $summary
            $bodyLines += ''
            $bodyLines += '</details>'
            $bodyLines += ''
          } else {
            $bodyLines = @(
              "VI compare staging completed: no VI pairs with both base/head paths were found.",
              ''
            )
          }

          if ($env:ARTIFACT_LINKS) {
            $parsedLinks = $env:ARTIFACT_LINKS | ConvertFrom-Json
            if ($parsedLinks) {
              $links = @()
              if ($parsedLinks -is [System.Collections.IEnumerable] -and -not ($parsedLinks -is [string])) {
                $links = @($parsedLinks)
              } else {
                $links = @($parsedLinks)
              }
              if ($links.Count -gt 0) {
                $bodyLines += 'Download links (expire ~1 hour):'
                foreach ($link in $links) {
                  if (-not $link) { continue }
                  $name = if ($link.PSObject.Properties['name']) { $link.name } else { $null }
                  $url  = if ($link.PSObject.Properties['url']) { $link.url } else { $null }
                  if (-not $name -or -not $url) { continue }
                  $bodyLines += "- [$name]($url)"
                }
                $bodyLines += ''
              }
            }
          }

          $bodyLines += "Run details: [$runUrl]($runUrl)."
          $body = $bodyLines -join "`n"
          $repoSlug = $env:REPO_SLUG
          if (-not $repoSlug) { $repoSlug = $env:GITHUB_REPOSITORY }
          if (-not $repoSlug) { throw 'Unable to determine repository slug for gh commands.' }
          gh pr comment $env:PR_NUMBER --repo $repoSlug --body $body

      - name: Remove staging label when not applicable
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ steps.pr.outputs.pr_number }}
          STAGING_LABEL: ${{ env.STAGING_LABEL }}
          STAGE_COUNT: ${{ steps.stage.outputs.stage_count }}
          JOB_STATUS: ${{ job.status }}
          REPO_SLUG: ${{ github.repository }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
          if (-not $env:STAGING_LABEL) { return }
          if (-not $env:PR_NUMBER) { return }
          $shouldRemove = $false
          if ($env:JOB_STATUS -ne 'success') { $shouldRemove = $true }
          elseif (-not $env:STAGE_COUNT -or $env:STAGE_COUNT -eq '0') { $shouldRemove = $true }
          if ($shouldRemove) {
            $repoSlug = $env:REPO_SLUG
            if (-not $repoSlug) { $repoSlug = $env:GITHUB_REPOSITORY }
            if (-not $repoSlug) { throw 'Unable to determine repository slug for gh commands.' }
            & gh pr edit $env:PR_NUMBER --repo $repoSlug --remove-label "$env:STAGING_LABEL" 2>$null
            if ($LASTEXITCODE -ne 0) {
              Write-Warning "Failed to remove label '$env:STAGING_LABEL' from PR #$env:PR_NUMBER (exit code $LASTEXITCODE)."
              $global:LASTEXITCODE = 0
            }
          }


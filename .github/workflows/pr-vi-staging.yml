name: PR VI Compare Staging

on:
  issue_comment:
    types:
      - created
  workflow_dispatch:
    inputs:
      pr:
        description: 'Pull request number'
        required: true
      note:
        description: 'Optional note that will be echoed in the run summary'
        required: false
      label_name:
        description: 'Label to apply when staging succeeds (defaults to vi-staging-ready)'
        required: false

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: pr-vi-staging-${{ github.event.issue.number || inputs.pr || github.run_id }}
  cancel-in-progress: false

jobs:
  stage:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request &&
        contains(github.event.comment.body || '', '/vi-stage') &&
        contains('OWNER,MEMBER,COLLABORATOR', github.event.comment.author_association)
      )
    runs-on: [self-hosted, Windows, X64]
    env:
      NOTE: ${{ inputs.note }}
      STAGING_LABEL: ${{ inputs.label_name || 'vi-staging-ready' }}
    steps:
      - name: Resolve pull request metadata
        id: pr
        env:
          GH_TOKEN: ${{ github.token }}
          INPUT_PR: ${{ inputs.pr }}
          COMMENT_PR: ${{ github.event.issue.number }}
          REPO_SLUG: ${{ github.repository }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $prNumber = if ($env:INPUT_PR) { $env:INPUT_PR } elseif ($env:COMMENT_PR) { $env:COMMENT_PR } else { '' }
          if (-not $prNumber) {
            throw 'A pull request number is required (workflow_dispatch input or issue comment).'
          }

          Write-Host "Resolving metadata for PR #$prNumber"
          $repoSlug = $env:REPO_SLUG
          if (-not $repoSlug) {
            $repoSlug = $env:GITHUB_REPOSITORY
          }
          if (-not $repoSlug) {
            throw 'Unable to determine repository slug for gh commands.'
          }

          $json = gh pr view $prNumber --repo $repoSlug --json number,url,baseRefName,baseRefOid,headRefName,headRefOid,headRepositoryOwner,headRepository
          $info = $json | ConvertFrom-Json

          if (-not $info) {
            throw "Unable to load pull request metadata for #$prNumber"
          }

          $baseSha = $info.baseRefOid
          $headSha = $info.headRefOid
          $baseRef = $info.baseRefName
          $headRef = $info.headRefName

          $ownerLogin = $info.headRepositoryOwner?.login
          $repoName = $info.headRepository?.name

          if (-not $repoName) {
            $repoParts = ($env:GITHUB_REPOSITORY ?? '') -split '/'
            if ($repoParts.Length -ge 2) {
              if (-not $ownerLogin) { $ownerLogin = $repoParts[0] }
              $repoName = $repoParts[1]
            } else {
              throw 'Unable to determine head repository name.'
            }
          }

          if (-not $ownerLogin) {
            $repoParts = ($env:GITHUB_REPOSITORY ?? '') -split '/'
            if ($repoParts.Length -ge 2) {
              $ownerLogin = $repoParts[0]
            } else {
              throw 'Unable to determine head repository owner.'
            }
          }

          $headRepo = "$ownerLogin/$repoName"

          "pr_number=$prNumber" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "pr_url=$($info.url)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "base_sha=$baseSha" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "head_sha=$headSha" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "base_ref=$baseRef" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "head_ref=$headRef" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "head_repo=$headRepo" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Checkout pull request head
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: ${{ steps.pr.outputs.head_repo }}
          ref: ${{ steps.pr.outputs.head_ref }}

      - name: Generate VI manifest
        id: manifest
        shell: pwsh
        env:
          BASE_SHA: ${{ steps.pr.outputs.base_sha }}
          HEAD_SHA: ${{ steps.pr.outputs.head_sha }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $repoRoot = Get-Location
          $artifactsDir = Join-Path $repoRoot 'vi-compare-artifacts'
          New-Item -ItemType Directory -Path $artifactsDir -Force | Out-Null

          $manifestPath = Join-Path $artifactsDir 'vi-manifest.json'
          & "$repoRoot\tools\Get-PRVIDiffManifest.ps1" -BaseRef $env:BASE_SHA -HeadRef $env:HEAD_SHA -OutputPath $manifestPath | Out-Null

          "artifacts_dir=$artifactsDir" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "manifest_path=$manifestPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Stage VI bundles
        id: stage
        shell: pwsh
        env:
          MANIFEST_PATH: ${{ steps.manifest.outputs.manifest_path }}
          ARTIFACTS_DIR: ${{ steps.manifest.outputs.artifacts_dir }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $repoRoot = Get-Location
          $artifactsDir = if ($env:ARTIFACTS_DIR) { $env:ARTIFACTS_DIR } else { Join-Path $repoRoot 'vi-compare-artifacts' }
          New-Item -ItemType Directory -Path $artifactsDir -Force | Out-Null

          if (-not $env:MANIFEST_PATH) {
            throw 'Manifest path was not provided.'
          }

          $stagingWorkRoot = Join-Path $repoRoot 'vi-staging-work'
          New-Item -ItemType Directory -Path $stagingWorkRoot -Force | Out-Null

          $results = & "$repoRoot\tools\Invoke-PRVIStaging.ps1" -ManifestPath $env:MANIFEST_PATH -WorkingRoot $stagingWorkRoot
          if (-not $results) {
            $results = @()
          }

          $exportDir = Join-Path $repoRoot 'vi-staging-artifacts'
          New-Item -ItemType Directory -Path $exportDir -Force | Out-Null
          $stagedCount = 0
          $skippedCount = 0

          $counter = 1
          foreach ($entry in $results) {
            if ($entry.staged -and $entry.staged.Root -and (Test-Path -LiteralPath $entry.staged.Root -PathType Container)) {
              $zipName = 'vi-staging-{0:D2}.zip' -f $counter
              $zipPath = Join-Path $exportDir $zipName
              if (Test-Path -LiteralPath $zipPath) {
                Remove-Item -LiteralPath $zipPath -Force
              }
              Compress-Archive -Path (Join-Path $entry.staged.Root '*') -DestinationPath $zipPath -Force
              Add-Member -InputObject $entry -NotePropertyName artifact -NotePropertyValue $zipName -Force
              $stagedCount++
              $counter++
            } else {
              $skippedCount++
              if (-not $entry.PSObject.Properties['skipReason']) {
                Add-Member -InputObject $entry -NotePropertyName skipReason -NotePropertyValue 'No staged output generated' -Force
              }
            }
          }

          $resultsPath = Join-Path $artifactsDir 'vi-staging-results.json'
          $results | ConvertTo-Json -Depth 6 | Set-Content -LiteralPath $resultsPath -Encoding utf8

          "results_path=$resultsPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "artifact_dir=$exportDir" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "stage_count=$($results.Count)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "stage_staged=$stagedCount" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "stage_skipped=$skippedCount" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Run LVCompare on staged pairs
        id: compare
        shell: pwsh
        env:
          RESULTS_PATH: ${{ steps.stage.outputs.results_path }}
          ARTIFACTS_DIR: ${{ steps.manifest.outputs.artifacts_dir }}
          RUN_STAGED_LVCOMPARE_FLAGS_MODE: ${{ vars.VI_STAGE_COMPARE_FLAGS_MODE || 'replace' }}
          RUN_STAGED_LVCOMPARE_FLAGS: ${{ vars.VI_STAGE_COMPARE_FLAGS }}
          RUN_STAGED_LVCOMPARE_REPLACE_FLAGS: ${{ vars.VI_STAGE_COMPARE_REPLACE_FLAGS }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          if (-not $env:RESULTS_PATH -or -not (Test-Path -LiteralPath $env:RESULTS_PATH -PathType Leaf)) {
            Write-Host 'No staged pairs to compare.'
            if ($Env:GITHUB_OUTPUT) {
              "compare_json=" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
              "compare_dir=" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
              "diff_count=0" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
              "match_count=0" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
              "skip_count=0" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
              "error_count=0" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            }
            exit 0
          }

          $scriptPath = Join-Path (Get-Location) 'tools' 'Run-StagedLVCompare.ps1'
          if (-not (Test-Path -LiteralPath $scriptPath -PathType Leaf)) {
            throw "Run-StagedLVCompare.ps1 not found at $scriptPath"
          }

          & $scriptPath -ResultsPath $env:RESULTS_PATH -ArtifactsDir $env:ARTIFACTS_DIR -RenderReport

      - name: Generate staging summary
        id: summary
        shell: pwsh
        env:
          RESULTS_PATH: ${{ steps.stage.outputs.results_path }}
          ARTIFACTS_DIR: ${{ steps.manifest.outputs.artifacts_dir }}
          STAGE_COUNT: ${{ steps.stage.outputs.stage_count }}
          STAGE_STAGED: ${{ steps.stage.outputs.stage_staged }}
          STAGE_SKIPPED: ${{ steps.stage.outputs.stage_skipped }}
          COMPARE_MATCH: ${{ steps.compare.outputs.match_count }}
          COMPARE_DIFF: ${{ steps.compare.outputs.diff_count }}
          COMPARE_ERROR: ${{ steps.compare.outputs.error_count }}
          COMPARE_SKIP: ${{ steps.compare.outputs.skip_count }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          if (-not $env:ARTIFACTS_DIR) {
            throw 'Artifacts directory path missing.'
          }

          $summaryPath = Join-Path $env:ARTIFACTS_DIR 'vi-staging-summary.md'
          $results = @()
          if ($env:RESULTS_PATH -and (Test-Path -LiteralPath $env:RESULTS_PATH -PathType Leaf)) {
            $json = Get-Content -LiteralPath $env:RESULTS_PATH -Raw
            if ($json) {
              $results = $json | ConvertFrom-Json
            }
          }

          $compareCounts = @{
            diff   = 0
            match  = 0
            error  = 0
            skipped= 0
          }

          if (-not $results) {
            $compareCounts.skipped = 0
            'No VI pairs with both base/head paths were staged.' | Set-Content -LiteralPath $summaryPath -Encoding utf8
          } else {
            $lines = @()
            $totalPairs = $results.Count
            $lines += ("Total manifest pairs: {0}" -f $totalPairs)
            if ($env:STAGE_STAGED) {
              $lines += ("Staged bundles: {0}" -f $env:STAGE_STAGED)
            }
            if ($env:STAGE_SKIPPED) {
              $lines += ("Skipped bundles: {0}" -f $env:STAGE_SKIPPED)
            }

            $table = @(
              '| # | Change | Base | Head | Artifact | Compare |',
              '| - | ------ | ---- | ---- | -------- | ------- |'
            )

            $idx = 1
            foreach ($entry in $results) {
              $compareStatus = 'n/a'
              if ($entry.PSObject.Properties['compare'] -and $entry.compare) {
                $compareStatus = $entry.compare.status
                switch ($compareStatus) {
                  'diff'    { $compareCounts.diff++ }
                  'match'   { $compareCounts.match++ }
                  'error'   { $compareCounts.error++ }
                  'skipped' { $compareCounts.skipped++ }
                  default   { if ($compareStatus) { $compareCounts.skipped++ } }
                }
                if ($entry.compare.status -eq 'diff' -and $entry.compare.reportPath) {
                  $compareStatus = "$($entry.compare.status) (report)"
                }
              } else {
                $compareCounts.skipped++
              }
              $artifactCell = if ($entry.artifact) { $entry.artifact } else { 'n/a' }
              $table += "| $idx | $($entry.changeType) | $($entry.basePath) | $($entry.headPath) | $artifactCell | $compareStatus |"
              $idx++
            }

            $lines += ("Compare results -> match: {0}, diff: {1}, error: {2}, skipped: {3}" -f $compareCounts.match, $compareCounts.diff, $compareCounts.error, $compareCounts.skipped)
            $lines += ''
            $lines += $table
            $lines -join "`n" | Set-Content -LiteralPath $summaryPath -Encoding utf8
          }

          "summary_path=$summaryPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          if ($Env:GITHUB_OUTPUT) {
            "diff_count=$($compareCounts.diff)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            "match_count=$($compareCounts.match)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            "error_count=$($compareCounts.error)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            "skip_count=$($compareCounts.skipped)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Ensure staging label exists
        if: steps.stage.outputs.stage_count != '0'
        env:
          GH_TOKEN: ${{ github.token }}
          STAGING_LABEL: ${{ env.STAGING_LABEL }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
          if (-not $env:STAGING_LABEL) { return }
          gh label create $env:STAGING_LABEL --color FFC82C --description "PR has VI staging bundles ready" 2>$null
          gh label edit $env:STAGING_LABEL --color FFC82C --description "PR has VI staging bundles ready" --force

      - name: Upload manifest & summary
        uses: actions/upload-artifact@v4
        with:
          name: vi-compare-manifest
          path: vi-compare-artifacts/

      - name: Upload staged bundles
        if: steps.stage.outputs.stage_count != '0'
        uses: actions/upload-artifact@v4
        with:
          name: vi-compare-staging
          path: ${{ steps.stage.outputs.artifact_dir }}

      - name: Collect artifact download links
        id: collect_links
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $targetNames = @('vi-compare-manifest', 'vi-compare-staging')
          $raw = gh api "repos/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID/artifacts" --paginate --jq '.artifacts[] | @json'
          $artifacts = @()
          if ($raw) {
            foreach ($line in ($raw -split "`n")) {
              if ($line) {
                $artifacts += ($line | ConvertFrom-Json)
              }
            }
          }

          $links = @()
          foreach ($name in $targetNames) {
            $artifact = $artifacts | Where-Object { $_.name -eq $name } | Select-Object -First 1
            if ($artifact) {
              $downloadUrl = gh api "repos/$env:GITHUB_REPOSITORY/actions/artifacts/$($artifact.id)" --jq '.archive_download_url'
              if ($downloadUrl) {
                $links += [pscustomobject]@{
                  name = $name
                  url  = $downloadUrl
                  size = $artifact.size_in_bytes
                }
              }
            }
          }

          $linksJson = ($links | ConvertTo-Json -Depth 4)
          $linksPath = Join-Path (Get-Location) 'vi-compare-artifacts/vi-staging-links.json'
          if ($links.Count -gt 0 -and $linksJson) {
            $linksJson | Set-Content -LiteralPath $linksPath -Encoding utf8
            $block = "artifact_links<<EOF`n$linksJson`nEOF"
            $block | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            "artifact_links_path=$linksPath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            "artifact_links=[]" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Append job summary
        shell: pwsh
        env:
          SUMMARY_PATH: ${{ steps.summary.outputs.summary_path }}
          NOTE: ${{ env.NOTE }}
          ARTIFACT_LINKS: ${{ steps.collect_links.outputs.artifact_links }}
        run: |
          $summary = Get-Content $env:SUMMARY_PATH -Raw
          $lines = @('## VI Compare Staging Summary', '')
          if ($env:NOTE) {
            $lines += "Note: $($env:NOTE)"
            $lines += ''
          }
          $lines += $summary
          $lines += ''
          if ($env:ARTIFACT_LINKS) {
            $links = $env:ARTIFACT_LINKS | ConvertFrom-Json
            if ($links.Count -gt 0) {
              $lines += '### Download Links (expire ~1 hour)'
              foreach ($link in $links) {
                $size = if ($link.size) { [math]::Round(($link.size/1KB), 1) } else { $null }
                $suffix = if ($size) { " (${size} KB)" } else { '' }
                $lines += "- [${link.name}]($($link.url))$suffix"
              }
              $lines += ''
            }
          }
          $lines += "Artifacts: [Run $env:GITHUB_RUN_ID](https://github.com/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID)"
          $lines -join "`n" | Out-File -FilePath $Env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

      - name: Apply staging label
        if: steps.stage.outputs.stage_count != '0'
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ steps.pr.outputs.pr_number }}
          STAGING_LABEL: ${{ env.STAGING_LABEL }}
          REPO_SLUG: ${{ github.repository }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
          if (-not $env:STAGING_LABEL) { return }
          if (-not $env:PR_NUMBER) { return }
          $repoSlug = $env:REPO_SLUG
          if (-not $repoSlug) { $repoSlug = $env:GITHUB_REPOSITORY }
          if (-not $repoSlug) { throw 'Unable to determine repository slug for gh commands.' }
          & gh pr edit $env:PR_NUMBER --repo $repoSlug --add-label "$env:STAGING_LABEL"
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Failed to add label '$env:STAGING_LABEL' to PR #$env:PR_NUMBER (exit code $LASTEXITCODE)."
            $global:LASTEXITCODE = 0
          }

      - name: Comment with results
        if: github.event_name == 'issue_comment'
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ steps.pr.outputs.pr_number }}
          SUMMARY_PATH: ${{ steps.summary.outputs.summary_path }}
          STAGE_COUNT: ${{ steps.stage.outputs.stage_count }}
          STAGE_SKIPPED: ${{ steps.stage.outputs.stage_skipped }}
          COMPARE_MATCH: ${{ steps.compare.outputs.match_count }}
          COMPARE_DIFF: ${{ steps.compare.outputs.diff_count }}
          COMPARE_ERROR: ${{ steps.compare.outputs.error_count }}
          COMPARE_SKIP: ${{ steps.compare.outputs.skip_count }}
          ARTIFACT_LINKS: ${{ steps.collect_links.outputs.artifact_links }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REPO_SLUG: ${{ github.repository }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
 
          if (-not $env:PR_NUMBER) { return }
 
          $runUrl = "https://github.com/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"
          $summary = Get-Content $env:SUMMARY_PATH -Raw
          $compareSummary = "Compare results -> match: {0}, diff: {1}, error: {2}, skipped: {3}" -f $env:COMPARE_MATCH, $env:COMPARE_DIFF, $env:COMPARE_ERROR, $env:COMPARE_SKIP
 
          if ([int]$env:STAGE_COUNT -gt 0) {
            $bodyLines = @(
              "VI compare staging is ready (**$env:STAGE_COUNT** pair$(if ($env:STAGE_COUNT -eq '1') { '' } else { 's' })).",
              '',
              $compareSummary,
              '',
              $summary,
              ''
            )
            if ($env:STAGE_SKIPPED -and [int]$env:STAGE_SKIPPED -gt 0) {
              $bodyLines += "Skipped bundles: $env:STAGE_SKIPPED"
              $bodyLines += ''
            }
            if ($env:ARTIFACT_LINKS) {
              $links = $env:ARTIFACT_LINKS | ConvertFrom-Json
              if ($links.Count -gt 0) {
                $bodyLines += 'Download links (expire ~1 hour):'
                foreach ($link in $links) {
                  $bodyLines += "- [${link.name}]($($link.url))"
                }
                $bodyLines += ''
              }
            }
            $bodyLines += "Download artifacts from [$runUrl]($runUrl)."
          } else {
            $bodyLines = @(
              'VI compare staging completed: no VI pairs with both base/head paths were found.',
              '',
              $compareSummary,
              '',
              "Run details: [$runUrl]($runUrl)."
            )
          }
 
          $body = $bodyLines -join "`n"
          $repoSlug = $env:REPO_SLUG
          if (-not $repoSlug) { $repoSlug = $env:GITHUB_REPOSITORY }
          if (-not $repoSlug) { throw 'Unable to determine repository slug for gh commands.' }
          gh pr comment $env:PR_NUMBER --repo $repoSlug --body $body
      - name: Remove staging label when not applicable
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ steps.pr.outputs.pr_number }}
          STAGING_LABEL: ${{ env.STAGING_LABEL }}
          STAGE_COUNT: ${{ steps.stage.outputs.stage_count }}
          JOB_STATUS: ${{ job.status }}
          REPO_SLUG: ${{ github.repository }}
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
          if (-not $env:STAGING_LABEL) { return }
          if (-not $env:PR_NUMBER) { return }
          $shouldRemove = $false
          if ($env:JOB_STATUS -ne 'success') { $shouldRemove = $true }
          elseif (-not $env:STAGE_COUNT -or $env:STAGE_COUNT -eq '0') { $shouldRemove = $true }
          if ($shouldRemove) {
            $repoSlug = $env:REPO_SLUG
            if (-not $repoSlug) { $repoSlug = $env:GITHUB_REPOSITORY }
            if (-not $repoSlug) { throw 'Unable to determine repository slug for gh commands.' }
            & gh pr edit $env:PR_NUMBER --repo $repoSlug --remove-label "$env:STAGING_LABEL" 2>$null
            if ($LASTEXITCODE -ne 0) {
              Write-Warning "Failed to remove label '$env:STAGING_LABEL' from PR #$env:PR_NUMBER (exit code $LASTEXITCODE)."
              $global:LASTEXITCODE = 0
            }
          }


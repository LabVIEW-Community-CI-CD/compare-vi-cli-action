name: Manual VI Compare (refs)

on:
  workflow_dispatch:
    inputs:
      vi_path:
        description: 'Repository-relative VI path (e.g. Fixtures/Loop.vi)'
        required: true
        default: 'VI1.vi'
        type: string
      compare_ref:
        description: 'Branch, tag, or commit to walk history from (defaults to HEAD)'
        required: false
        default: ''
        type: string
      compare_depth:
        description: 'Maximum commit pairs to evaluate (0 = no limit)'
        required: false
        default: '10'
        type: string
      compare_modes:
        description: 'Comma/semicolon separated modes to evaluate (default,attributes,front-panel,block-diagram,all)'
        required: false
        default: 'default'
        type: string
      compare_ignore_flags:
        description: 'LVCompare ignore toggles (default, none, or comma-separated flags such as noattr,nofp)'
        required: false
        default: 'default'
        type: string
      compare_additional_flags:
        description: 'Extra LVCompare flags (optional, space-delimited)'
        required: false
        default: ''
        type: string
      compare_fail_fast:
        description: 'Stop after the first detected diff'
        required: false
        default: 'false'
        type: choice
        options: ['true','false']
      compare_fail_on_diff:
        description: 'Fail the job when any compare diff is detected'
        required: false
        default: 'false'
        type: choice
        options: ['true','false']
      sample_id:
        description: 'Optional sample id for concurrency grouping'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.sample_id || github.ref }}
  cancel-in-progress: false

jobs:
  preflight:
    runs-on: [self-hosted, Windows, X64]
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5
      - name: Verify LVCompare and idle LabVIEW state
        shell: pwsh
        run: |
          $cli = 'C:\Program Files\National Instruments\Shared\LabVIEW Compare\LVCompare.exe'
          if (-not (Test-Path -LiteralPath $cli)) {
            Write-Host "::error::LVCompare.exe not found at canonical path: $cli"; exit 1
          }
          $lv = Get-Process -Name 'LabVIEW' -ErrorAction SilentlyContinue
          if ($lv) { Write-Host "::error::LabVIEW.exe is running (PID(s): $($lv.Id -join ','))"; exit 1 }
          Write-Host 'Preflight OK: LVCompare present; LabVIEW not running.'

  compare:
    runs-on: [self-hosted, Windows, X64]
    needs: preflight
    permissions:
      contents: read
    timeout-minutes: 30
    env:
      UNBLOCK_GUARD: '1'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Ensure refs available
        shell: pwsh
        run: |
          git fetch --all --prune --prune-tags --tags

      - name: Compare VI history (commit pairs)
        id: history
        shell: pwsh
        env:
          TARGET_PATH: ${{ inputs.vi_path }}
          START_REF: ${{ inputs.compare_ref }}
          MAX_PAIRS: ${{ inputs.compare_depth }}
          IGNORE_FLAGS: ${{ inputs.compare_ignore_flags }}
          MODES: ${{ inputs.compare_modes }}
          EXTRA_FLAGS: ${{ inputs.compare_additional_flags }}
          FAIL_FAST: ${{ inputs.compare_fail_fast }}
          FAIL_ON_DIFF: ${{ inputs.compare_fail_on_diff }}
        run: |
          $ErrorActionPreference = 'Stop'
          function Convert-ToBoolean([string]$value, [bool]$default = $false) {
            if ([string]::IsNullOrWhiteSpace($value)) { return $default }
            switch ($value.Trim().ToLowerInvariant()) {
              'true' { return $true }
              'false' { return $false }
              '1' { return $true }
              '0' { return $false }
              'yes' { return $true }
              'no' { return $false }
              default { return [System.Convert]::ToBoolean($value) }
            }
          }
          if ([string]::IsNullOrWhiteSpace($env:TARGET_PATH)) {
            throw 'target_path input cannot be empty.'
          }
          $targetPath = $env:TARGET_PATH.Trim()
          if (-not $targetPath) {
            throw 'target_path input cannot be empty.'
          }
          $scriptPath = Join-Path $env:GITHUB_WORKSPACE 'tools/Compare-VIHistory.ps1'
          if (-not (Test-Path -LiteralPath $scriptPath -PathType Leaf)) {
            throw "Compare-VIHistory.ps1 not found at $scriptPath"
          }
          $resultsRoot = Join-Path $env:GITHUB_WORKSPACE 'tests/results/ref-compare/history'
          New-Item -ItemType Directory -Path $resultsRoot -Force | Out-Null

          function Normalize-Mode([string]$value) {
            $trim = $value.Trim()
            if (-not $trim) { return 'default' }
            return $trim.ToLowerInvariant()
          }

          $modeInput = if ([string]::IsNullOrWhiteSpace($env:MODES)) { 'default' } else { $env:MODES }
          $modeTokens = @(
            $modeInput -split '[,;]' |
              ForEach-Object { Normalize-Mode $_ } |
              Where-Object { $_ }
          )
          if ($modeTokens.Count -eq 0) { $modeTokens = @('default') }
          $modeTokens = @($modeTokens | Select-Object -Unique)

          $startRef = if ([string]::IsNullOrWhiteSpace($env:START_REF)) { $null } else { $env:START_REF.Trim() }
          $endRef = $null

          $parsedMaxPairs = $null
          if (-not [string]::IsNullOrWhiteSpace($env:MAX_PAIRS)) {
            $rawMax = $env:MAX_PAIRS.Trim()
            $parsed = 0
            if (-not [int]::TryParse($rawMax, [ref]$parsed) -or $parsed -lt 0) {
              throw "max_pairs must be a non-negative integer (received '$rawMax')."
            }
            $parsedMaxPairs = $parsed
          }

          $scriptArgs = @(
            '-TargetPath', $targetPath,
            '-ResultsDir', $resultsRoot,
            '-GitHubOutputPath', $env:GITHUB_OUTPUT,
            '-StepSummaryPath', $env:GITHUB_STEP_SUMMARY,
            '-Detailed',
            '-RenderReport'
          )
          foreach ($mode in $modeTokens) {
            $scriptArgs += '-Mode'
            $scriptArgs += $mode
          }
          if ($startRef) {
            $scriptArgs += '-StartRef'
            $scriptArgs += $startRef
          }
          if ($endRef) {
            $scriptArgs += '-EndRef'
            $scriptArgs += $endRef
          }
          if ($null -ne $parsedMaxPairs) {
            $scriptArgs += '-MaxPairs'
            $scriptArgs += $parsedMaxPairs
          }
          if (-not [string]::IsNullOrWhiteSpace($env:EXTRA_FLAGS)) {
            $scriptArgs += '-AdditionalFlags'
            $scriptArgs += $env:EXTRA_FLAGS
          }

          $defaultIgnoreFlags = @('noattr','nofp','nofppos','nobdcosm')
          $ignoreTokens = @()
          if (-not [string]::IsNullOrWhiteSpace($env:IGNORE_FLAGS)) {
            $ignoreTokens = @(
              $env:IGNORE_FLAGS -split '[,\s]+' |
                Where-Object { $_ } |
                ForEach-Object { $_.Trim() }
            )
          }
          $ignoreSet = New-Object 'System.Collections.Generic.HashSet[string]' ([System.StringComparer]::OrdinalIgnoreCase)
          if ($ignoreTokens.Count -eq 0) {
            foreach ($flag in $defaultIgnoreFlags) { [void]$ignoreSet.Add($flag) }
          }
          foreach ($token in $ignoreTokens) {
            $trim = $token.Trim()
            if (-not $trim) { continue }
            $lower = $trim.ToLowerInvariant()
            if ($lower -eq 'default') {
              foreach ($flag in $defaultIgnoreFlags) { [void]$ignoreSet.Add($flag) }
              continue
            }
            if ($lower -eq 'none') {
              $ignoreSet.Clear()
              continue
            }
            if ($lower.StartsWith('+')) {
              $flag = $lower.Substring(1)
              if ($flag) { [void]$ignoreSet.Add($flag) }
              continue
            }
            if ($lower.StartsWith('-')) {
              $flag = $lower.Substring(1)
              if ($flag) { [void]$ignoreSet.Remove($flag) }
              continue
            }
            [void]$ignoreSet.Add($lower)
          }

          $flagNoAttr = $ignoreSet.Contains('noattr')
          $flagNoFp = $ignoreSet.Contains('nofp')
          $flagNoFpPos = $ignoreSet.Contains('nofppos')
          $flagNoBdCosm = $ignoreSet.Contains('nobdcosm')

          $scriptArgs += ("-FlagNoAttr:{0}" -f $flagNoAttr)
          $scriptArgs += ("-FlagNoFp:{0}" -f $flagNoFp)
          $scriptArgs += ("-FlagNoFpPos:{0}" -f $flagNoFpPos)
          $scriptArgs += ("-FlagNoBdCosm:{0}" -f $flagNoBdCosm)
          $scriptArgs += ("-FailFast:{0}" -f (Convert-ToBoolean $env:FAIL_FAST $false))
          $scriptArgs += ("-FailOnDiff:{0}" -f (Convert-ToBoolean $env:FAIL_ON_DIFF $false))

          & $scriptPath @scriptArgs

      - name: Collect diff artifact directories
        id: diffscan
        if: ${{ always() && steps.history.outputs['manifest-path'] != '' }}
        shell: pwsh
        env:
          MODE_MANIFESTS_JSON: ${{ steps.history.outputs['mode-manifests-json'] }}
          LEGACY_MANIFEST_PATH: ${{ steps.history.outputs['manifest-path'] }}
        run: |
          $ErrorActionPreference = 'Stop'
          $manifestPaths = @()

          if (-not [string]::IsNullOrWhiteSpace($env:MODE_MANIFESTS_JSON)) {
            try {
              $modeInfo = $env:MODE_MANIFESTS_JSON | ConvertFrom-Json
              foreach ($entry in @($modeInfo)) {
                if ($entry -and $entry.manifest) {
                  $manifestPaths += [string]$entry.manifest
                }
              }
            } catch {
              Write-Warning ("Unable to parse mode manifest JSON: {0}" -f $_.Exception.Message)
            }
          }
          if ($manifestPaths.Count -eq 0 -and -not [string]::IsNullOrWhiteSpace($env:LEGACY_MANIFEST_PATH)) {
            $manifestPaths += ($env:LEGACY_MANIFEST_PATH -split "`n" | Where-Object { $_ })
          }

          $dirs = @()
          foreach ($manifestPath in $manifestPaths) {
            if (-not (Test-Path -LiteralPath $manifestPath)) { continue }
            $manifest = Get-Content -LiteralPath $manifestPath -Raw | ConvertFrom-Json
            foreach ($item in $manifest.comparisons) {
              if ($item.result -and $item.result.artifactDir) {
                if (Test-Path -LiteralPath $item.result.artifactDir) {
                  $dirs += (Resolve-Path -LiteralPath $item.result.artifactDir).Path
                }
              }
            }
          }
          if ($dirs.Count -gt 0) {
            "hasDiff=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            $dirsText = $dirs -join "`n"
            $blockLines = @('artifactDirs<<EOF', $dirsText, 'EOF')
            ($blockLines -join "`n") | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            "hasDiff=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Upload compare results
        if: ${{ always() && steps.history.outputs['results-dir'] != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: vi-compare-manifests
          path: |
            ${{ steps.history.outputs['manifest-path'] }}
            ${{ steps.history.outputs['results-dir'] }}/**/manifest.json
            ${{ steps.history.outputs['results-dir'] }}/**/*-summary.json
          if-no-files-found: warn

      - name: Upload LVCompare diff artifacts
        if: ${{ always() && steps.diffscan.outputs.hasDiff == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: vi-compare-diff-artifacts
          path: ${{ steps.diffscan.outputs.artifactDirs }}
          if-no-files-found: warn

      - name: Runner Unblock Guard
        if: always()
        uses: ./.github/actions/runner-unblock-guard
        with:
          snapshot-path: tests/results/runner-unblock-snapshot.json
          cleanup: ${{ env.UNBLOCK_GUARD == '1' }}
          process-names: 'conhost,pwsh,LabVIEW,LVCompare'

name: Manual VI Compare (refs)

on:
  workflow_dispatch:
    inputs:
      vi_path:
        description: 'Repository-relative VI path (e.g. Fixtures/Loop.vi)'
        required: true
        default: 'VI1.vi'
        type: string
      compare_ref:
        description: 'Branch, tag, or commit to walk history from (defaults to HEAD)'
        required: false
        default: ''
        type: string
      compare_depth:
        description: 'Maximum commit pairs to evaluate (0 = no limit)'
        required: false
        default: '10'
        type: string
      compare_modes:
        description: 'Comma/semicolon separated modes to evaluate (default,attributes,front-panel,block-diagram,all)'
        required: false
        default: 'default'
        type: string
      compare_ignore_flags:
        description: 'LVCompare ignore toggles (default, none, or comma-separated flags such as noattr,nofp)'
        required: false
        default: 'none'
        type: string
      compare_additional_flags:
        description: 'Extra LVCompare flags (optional, space-delimited)'
        required: false
        default: ''
        type: string
      compare_fail_fast:
        description: 'Stop after the first detected diff'
        required: false
        default: 'false'
        type: choice
        options: ['true','false']
      compare_fail_on_diff:
        description: 'Fail the job when any compare diff is detected'
        required: false
        default: 'false'
        type: choice
        options: ['true','false']
      sample_id:
        description: 'Optional sample id for concurrency grouping'
        required: false
        type: string
      notify_issue:
        description: 'Optional GitHub issue number to receive a summary comment'
        required: false
        default: ''
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.sample_id || github.ref }}
  cancel-in-progress: false

jobs:
  preflight:
    runs-on: [self-hosted, Windows, X64]
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5
      - name: Verify LVCompare and idle LabVIEW state
        shell: pwsh
        run: |
          $cli = 'C:\Program Files\National Instruments\Shared\LabVIEW Compare\LVCompare.exe'
          if (-not (Test-Path -LiteralPath $cli)) {
            Write-Host "::error::LVCompare.exe not found at canonical path: $cli"; exit 1
          }
          $lv = Get-Process -Name 'LabVIEW' -ErrorAction SilentlyContinue
          if ($lv) { Write-Host "::error::LabVIEW.exe is running (PID(s): $($lv.Id -join ','))"; exit 1 }
          Write-Host 'Preflight OK: LVCompare present; LabVIEW not running.'

  compare:
    runs-on: [self-hosted, Windows, X64]
    needs: preflight
    permissions:
      contents: read
      issues: write
    outputs:
      manifest_path: ${{ steps.job_outputs.outputs.manifest_path }}
      results_dir: ${{ steps.job_outputs.outputs.results_dir }}
      mode_manifests_json: ${{ steps.job_outputs.outputs.mode_manifests_json }}
      total_diffs: ${{ steps.job_outputs.outputs.total_diffs }}
      has_diff: ${{ steps.job_outputs.outputs.has_diff }}
      diff_artifact_dirs: ${{ steps.job_outputs.outputs.diff_artifact_dirs }}
      artifact_prefix: ${{ steps.job_outputs.outputs.artifact_prefix }}
      manifest_artifact_name: ${{ steps.job_outputs.outputs.manifest_artifact_name }}
      diff_artifact_name: ${{ steps.job_outputs.outputs.diff_artifact_name }}
      mode_list: ${{ steps.job_outputs.outputs.mode_list }}
      flag_list: ${{ steps.job_outputs.outputs.flag_list }}
      history_report_md: ${{ steps.job_outputs.outputs.history_report_md }}
      history_report_html: ${{ steps.job_outputs.outputs.history_report_html }}
    timeout-minutes: 30
    env:
      UNBLOCK_GUARD: '1'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Ensure refs available
        shell: pwsh
        run: |
          git fetch --all --prune --prune-tags --tags

      - name: Compare VI history (commit pairs)
        id: history
        shell: pwsh
        env:
          TARGET_PATH: ${{ inputs.vi_path }}
          START_REF: ${{ inputs.compare_ref }}
          MAX_PAIRS: ${{ inputs.compare_depth }}
          IGNORE_FLAGS: ${{ inputs.compare_ignore_flags }}
          MODES: ${{ inputs.compare_modes }}
          EXTRA_FLAGS: ${{ inputs.compare_additional_flags }}
          FAIL_FAST: ${{ inputs.compare_fail_fast }}
          FAIL_ON_DIFF: ${{ inputs.compare_fail_on_diff }}
        run: |
          $ErrorActionPreference = 'Stop'
          function Convert-ToBoolean([string]$value, [bool]$default = $false) {
            if ([string]::IsNullOrWhiteSpace($value)) { return $default }
            switch ($value.Trim().ToLowerInvariant()) {
              'true' { return $true }
              'false' { return $false }
              '1' { return $true }
              '0' { return $false }
              'yes' { return $true }
              'no' { return $false }
              default { return [System.Convert]::ToBoolean($value) }
            }
          }
          if ([string]::IsNullOrWhiteSpace($env:TARGET_PATH)) {
            throw 'target_path input cannot be empty.'
          }
          $targetPath = $env:TARGET_PATH.Trim()
          if (-not $targetPath) {
            throw 'target_path input cannot be empty.'
          }
          $scriptPath = Join-Path $env:GITHUB_WORKSPACE 'tools/Compare-VIHistory.ps1'
          if (-not (Test-Path -LiteralPath $scriptPath -PathType Leaf)) {
            throw "Compare-VIHistory.ps1 not found at $scriptPath"
          }
          $resultsRoot = Join-Path $env:GITHUB_WORKSPACE 'tests/results/ref-compare/history'
          New-Item -ItemType Directory -Path $resultsRoot -Force | Out-Null

          function Normalize-Mode([string]$value) {
            $trim = $value.Trim()
            if (-not $trim) { return 'default' }
            return $trim.ToLowerInvariant()
          }

          $modeInput = if ([string]::IsNullOrWhiteSpace($env:MODES)) { 'default' } else { $env:MODES }
          $modeTokens = @(
            $modeInput -split '[,;]' |
              ForEach-Object { Normalize-Mode $_ } |
              Where-Object { $_ }
          )
          if ($modeTokens.Count -eq 0) { $modeTokens = @('default') }
          $modeTokens = @($modeTokens | Select-Object -Unique)

          $startRef = if ([string]::IsNullOrWhiteSpace($env:START_REF)) { $null } else { $env:START_REF.Trim() }
          $endRef = $null

          $parsedMaxPairs = $null
          if (-not [string]::IsNullOrWhiteSpace($env:MAX_PAIRS)) {
            $rawMax = $env:MAX_PAIRS.Trim()
            $parsed = 0
            if (-not [int]::TryParse($rawMax, [ref]$parsed) -or $parsed -lt 0) {
              throw "max_pairs must be a non-negative integer (received '$rawMax')."
            }
            $parsedMaxPairs = $parsed
          }

          $invokeParams = [ordered]@{
            TargetPath        = $targetPath
            ResultsDir        = $resultsRoot
            GitHubOutputPath  = $env:GITHUB_OUTPUT
            Detailed          = $true
            RenderReport      = $true
            Mode              = $modeTokens
          }
          if (-not [string]::IsNullOrWhiteSpace($env:GITHUB_STEP_SUMMARY)) {
            $invokeParams.StepSummaryPath = $env:GITHUB_STEP_SUMMARY
          }
          if ($startRef) { $invokeParams.StartRef = $startRef }
          if ($endRef) { $invokeParams.EndRef = $endRef }
          if ($null -ne $parsedMaxPairs) {
            $invokeParams.MaxPairs = [int]$parsedMaxPairs
          }
          if (-not [string]::IsNullOrWhiteSpace($env:EXTRA_FLAGS)) {
            $invokeParams.AdditionalFlags = $env:EXTRA_FLAGS
          }

          $defaultIgnoreFlags = @('noattr','nofp','nofppos','nobdcosm')
          $ignoreTokens = @()
          if (-not [string]::IsNullOrWhiteSpace($env:IGNORE_FLAGS)) {
            $ignoreTokens = @(
              $env:IGNORE_FLAGS -split '[,\s]+' |
                Where-Object { $_ } |
                ForEach-Object { $_.Trim() }
            )
          }
          $ignoreSet = New-Object 'System.Collections.Generic.HashSet[string]' ([System.StringComparer]::OrdinalIgnoreCase)
          if ($ignoreTokens.Count -eq 0) {
            $ignoreTokens = @('none')
          }
          foreach ($token in $ignoreTokens) {
            $trim = $token.Trim()
            if (-not $trim) { continue }
            $lower = $trim.ToLowerInvariant()
            if ($lower -eq 'default') {
              foreach ($flag in $defaultIgnoreFlags) { [void]$ignoreSet.Add($flag) }
              continue
            }
            if ($lower -eq 'none') {
              $ignoreSet.Clear()
              continue
            }
            if ($lower.StartsWith('+')) {
              $flag = $lower.Substring(1)
              if ($flag) { [void]$ignoreSet.Add($flag) }
              continue
            }
            if ($lower.StartsWith('-')) {
              $flag = $lower.Substring(1)
              if ($flag) { [void]$ignoreSet.Remove($flag) }
              continue
            }
            [void]$ignoreSet.Add($lower)
          }

          $flagNoAttr = $ignoreSet.Contains('noattr')
          $flagNoFp = $ignoreSet.Contains('nofp')
          $flagNoFpPos = $ignoreSet.Contains('nofppos')
          $flagNoBdCosm = $ignoreSet.Contains('nobdcosm')

          $invokeParams.FlagNoAttr   = $flagNoAttr
          $invokeParams.FlagNoFp     = $flagNoFp
          $invokeParams.FlagNoFpPos  = $flagNoFpPos
          $invokeParams.FlagNoBdCosm = $flagNoBdCosm

          if (Convert-ToBoolean $env:FAIL_FAST $false) {
            $invokeParams.FailFast = $true
          }
          if (Convert-ToBoolean $env:FAIL_ON_DIFF $false) {
            $invokeParams.FailOnDiff = $true
          }

          & $scriptPath @invokeParams

      - name: Collect diff artifact directories
        id: diffscan
        if: ${{ always() && steps.history.outputs['manifest-path'] != '' }}
        shell: pwsh
        env:
          MODE_MANIFESTS_JSON: ${{ steps.history.outputs['mode-manifests-json'] }}
          LEGACY_MANIFEST_PATH: ${{ steps.history.outputs['manifest-path'] }}
        run: |
          $ErrorActionPreference = 'Stop'
          $manifestPaths = @()

          if (-not [string]::IsNullOrWhiteSpace($env:MODE_MANIFESTS_JSON)) {
            try {
              $modeInfo = $env:MODE_MANIFESTS_JSON | ConvertFrom-Json
              foreach ($entry in @($modeInfo)) {
                if ($entry -and $entry.manifest) {
                  $manifestPaths += [string]$entry.manifest
                }
              }
            } catch {
              Write-Warning ("Unable to parse mode manifest JSON: {0}" -f $_.Exception.Message)
            }
          }
          if ($manifestPaths.Count -eq 0 -and -not [string]::IsNullOrWhiteSpace($env:LEGACY_MANIFEST_PATH)) {
            $manifestPaths += ($env:LEGACY_MANIFEST_PATH -split "`n" | Where-Object { $_ })
          }

          $dirs = @()
          foreach ($manifestPath in $manifestPaths) {
            if (-not (Test-Path -LiteralPath $manifestPath)) { continue }
            $manifest = Get-Content -LiteralPath $manifestPath -Raw | ConvertFrom-Json
            foreach ($item in $manifest.comparisons) {
              if ($item.result -and $item.result.artifactDir) {
                if (Test-Path -LiteralPath $item.result.artifactDir) {
                  $dirs += (Resolve-Path -LiteralPath $item.result.artifactDir).Path
                }
              }
            }
          }
          if ($dirs.Count -gt 0) {
            "hasDiff=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            $dirsText = $dirs -join "`n"
            $blockLines = @('artifactDirs<<EOF', $dirsText, 'EOF')
            ($blockLines -join "`n") | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            "hasDiff=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Prepare artifact context
        if: ${{ always() }}
        id: artifact_context
        shell: pwsh
        env:
          TARGET_PATH: ${{ steps.history.outputs['target-path'] || inputs.vi_path }}
          RAW_MODE_LIST: ${{ steps.history.outputs['mode-list'] }}
          RAW_FLAG_LIST: ${{ steps.history.outputs['flag-list'] }}
        run: |
          $ErrorActionPreference = 'Stop'

          function Write-OutputValue {
            param([string]$Name, [string]$Value)
            if ([string]::IsNullOrWhiteSpace($Name)) { return }
            if ([string]::IsNullOrWhiteSpace($Value)) { return }
            "$Name=$Value" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

          function Convert-ToSlug {
            param(
              [string]$Value,
              [string]$Fallback
            )
            if ([string]::IsNullOrWhiteSpace($Value)) { return $Fallback }
            $slug = $Value.ToLowerInvariant()
            $slug = $slug -replace '[^a-z0-9]+','-'
            $slug = $slug.Trim('-')
            if (-not $slug) { return $Fallback }
            if ($slug.Length -gt 60) { $slug = $slug.Substring(0,60).Trim('-') }
            if (-not $slug) { return $Fallback }
            return $slug
          }

          $targetSource = if ([string]::IsNullOrWhiteSpace($env:TARGET_PATH)) { 'vi' } else { $env:TARGET_PATH }

          $modeTokens = @()
          if (-not [string]::IsNullOrWhiteSpace($env:RAW_MODE_LIST)) {
            $modeTokens = @(
              $env:RAW_MODE_LIST -split '[,;]' |
                ForEach-Object { $_.Trim() } |
                Where-Object { $_ }
            )
          }
          if ($modeTokens.Count -eq 0) { $modeTokens = @('default') }
          $modeTokens = $modeTokens | Sort-Object -Unique

          $flagTokens = @()
          if (-not [string]::IsNullOrWhiteSpace($env:RAW_FLAG_LIST)) {
            $flagTokens = @(
              $env:RAW_FLAG_LIST -split '[,;]' |
                ForEach-Object { $_.Trim() } |
                Where-Object { $_ }
            )
          }
          if ($flagTokens.Count -eq 0) { $flagTokens = @('none') }
          $flagTokens = $flagTokens | Sort-Object -Unique

          $normalizedFlags = @()
          foreach ($flag in $flagTokens) {
            if ($flag -ieq 'none') { continue }
            $clean = $flag
            if ($clean.StartsWith('-')) { $clean = $clean.Substring(1) }
            if ([string]::IsNullOrWhiteSpace($clean)) { continue }
            $normalizedFlags += $clean.ToLowerInvariant()
          }
          if ($normalizedFlags.Count -gt 1) {
            $normalizedFlags = $normalizedFlags | Sort-Object -Unique
          }
          if ($normalizedFlags.Count -eq 0) { $normalizedFlags = @('none') }
          if ($normalizedFlags.Count -gt 1 -and ($normalizedFlags -contains 'none')) {
            $normalizedFlags = $normalizedFlags | Where-Object { $_ -ne 'none' }
            if ($normalizedFlags.Count -eq 0) { $normalizedFlags = @('none') }
          }

          $targetSlug = Convert-ToSlug -Value $targetSource -Fallback 'vi'
          $modesSlug = Convert-ToSlug -Value ($modeTokens -join '-') -Fallback 'modes'
          $flagsSlug = Convert-ToSlug -Value ($normalizedFlags -join '-') -Fallback 'flags'
          $artifactPrefix = "$targetSlug-$modesSlug-$flagsSlug"

          Write-OutputValue -Name 'artifact_prefix' -Value $artifactPrefix
          Write-OutputValue -Name 'mode_list' -Value ($modeTokens -join ', ')
          Write-OutputValue -Name 'flag_list' -Value ($flagTokens -join ', ')
          Write-OutputValue -Name 'manifest_artifact_name' -Value ("vi-compare-{0}-manifests" -f $artifactPrefix)
          Write-OutputValue -Name 'diff_artifact_name' -Value ("vi-compare-{0}-diffs" -f $artifactPrefix)
      - name: Upload compare results
        if: ${{ always() && steps.history.outputs['results-dir'] != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact_context.outputs.manifest_artifact_name || 'vi-compare-manifests' }}
          path: |
            ${{ steps.history.outputs['manifest-path'] }}
            ${{ steps.history.outputs['results-dir'] }}/**/manifest.json
            ${{ steps.history.outputs['results-dir'] }}/**/*-summary.json
          if-no-files-found: warn

      - name: Upload LVCompare diff artifacts
        if: ${{ always() && steps.diffscan.outputs.hasDiff == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact_context.outputs.diff_artifact_name || 'vi-compare-diff-artifacts' }}
          path: ${{ steps.diffscan.outputs.artifactDirs }}
          if-no-files-found: warn

      - name: Append artifact summary
        if: ${{ always() }}
        shell: pwsh
        env:
          MANIFEST_ARTIFACT: ${{ steps.artifact_context.outputs.manifest_artifact_name || 'vi-compare-manifests' }}
          DIFF_ARTIFACT: ${{ steps.artifact_context.outputs.diff_artifact_name || 'vi-compare-diff-artifacts' }}
          HAS_DIFF: ${{ steps.diffscan.outputs.hasDiff }}
          HISTORY_REPORT_MD: ${{ steps.history.outputs['history-report-md'] }}
        run: |
          if (-not $env:GITHUB_STEP_SUMMARY) { return }
          $lines = @('', '#### Workflow Artifacts', '')
          $lines += ('- Manifests: `{0}`' -f $env:MANIFEST_ARTIFACT)
          if ($env:HAS_DIFF -eq 'true') {
            $lines += ('- Diff artifacts: `{0}`' -f $env:DIFF_ARTIFACT)
          } else {
            $lines += '- Diff artifacts: *(not produced)*'
          }
          if ($env:HISTORY_REPORT_MD) {
            $lines += ('- History report: `{0}`' -f $env:HISTORY_REPORT_MD)
          }
          $lines -join "`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

      - name: Publish stakeholder summary comment
        if: ${{ success() && inputs.notify_issue != '' && github.event.repository.fork == false }}
        shell: pwsh
        env:
          MANIFEST_PATH: ${{ steps.history.outputs['manifest-path'] }}
          MODE_SUMMARY: ${{ steps.history.outputs['mode-manifests-json'] }}
          ISSUE_NUMBER: ${{ inputs.notify_issue }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HISTORY_REPORT_MD: ${{ steps.history.outputs['history-report-md'] }}
          HISTORY_REPORT_HTML: ${{ steps.history.outputs['history-report-html'] }}
        run: |
          $ErrorActionPreference = 'Stop'
          $script = Join-Path $env:GITHUB_WORKSPACE 'tools/Publish-VICompareSummary.ps1'
          if (-not (Test-Path -LiteralPath $script -PathType Leaf)) {
            throw ("Publish-VICompareSummary.ps1 not found at {0}" -f $script)
          }
          $params = @{
            ManifestPath   = $env:MANIFEST_PATH
            ModeSummaryJson= $env:MODE_SUMMARY
            Issue          = $env:ISSUE_NUMBER
            Repository     = $env:GITHUB_REPOSITORY
          }
          if ($env:HISTORY_REPORT_MD) {
            $params.HistoryReportPath = $env:HISTORY_REPORT_MD
          }
          if ($env:HISTORY_REPORT_HTML) {
            $params.HistoryReportHtmlPath = $env:HISTORY_REPORT_HTML
          }
          if ($env:GH_TOKEN) {
            $params.GitHubToken = $env:GH_TOKEN
          }
          & $script @params

      - name: Capture job outputs
        if: always()
        id: job_outputs
        shell: pwsh
        env:
          MANIFEST_PATH: ${{ steps.history.outputs['manifest-path'] }}
          RESULTS_DIR: ${{ steps.history.outputs['results-dir'] }}
          MODE_MANIFESTS_JSON: ${{ steps.history.outputs['mode-manifests-json'] }}
          TOTAL_DIFFS: ${{ steps.history.outputs['total-diffs'] }}
          MODE_LIST: ${{ steps.artifact_context.outputs.mode_list || steps.history.outputs['mode-list'] }}
          FLAG_LIST: ${{ steps.artifact_context.outputs.flag_list || steps.history.outputs['flag-list'] }}
          TARGET_PATH: ${{ steps.history.outputs['target-path'] || inputs.vi_path }}
          HAS_DIFF: ${{ steps.diffscan.outputs.hasDiff }}
          DIFF_DIRS: ${{ steps.diffscan.outputs.artifactDirs }}
          ARTIFACT_PREFIX: ${{ steps.artifact_context.outputs.artifact_prefix }}
          MANIFEST_ARTIFACT: ${{ steps.artifact_context.outputs.manifest_artifact_name }}
          DIFF_ARTIFACT: ${{ steps.artifact_context.outputs.diff_artifact_name }}
          HISTORY_REPORT_MD: ${{ steps.history.outputs['history-report-md'] }}
          HISTORY_REPORT_HTML: ${{ steps.history.outputs['history-report-html'] }}
        run: |
          $ErrorActionPreference = 'Stop'

          function Set-OutputValue {
            param([string]$Name, [string]$Value)
            if ([string]::IsNullOrWhiteSpace($Name)) { return }
            if ($null -eq $Value) { return }
            "$Name=$Value" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

          function Set-MultilineOutput {
            param([string]$Name, [string]$Value)
            if ([string]::IsNullOrWhiteSpace($Name)) { return }
            if ([string]::IsNullOrWhiteSpace($Value)) { return }
            @("$Name<<EOF", $Value, 'EOF') | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

          Set-OutputValue -Name 'manifest_path' -Value $env:MANIFEST_PATH
          Set-OutputValue -Name 'results_dir' -Value $env:RESULTS_DIR
          Set-OutputValue -Name 'mode_manifests_json' -Value $env:MODE_MANIFESTS_JSON
          if ($null -ne $env:TOTAL_DIFFS -and $env:TOTAL_DIFFS -ne '') {
            Set-OutputValue -Name 'total_diffs' -Value $env:TOTAL_DIFFS
          } else {
            Set-OutputValue -Name 'total_diffs' -Value '0'
          }
          if ($env:TARGET_PATH -ne $null -and $env:TARGET_PATH -ne '') {
            Set-OutputValue -Name 'target_path' -Value $env:TARGET_PATH
          }
          if ($env:MODE_LIST -ne $null -and $env:MODE_LIST -ne '') {
            Set-OutputValue -Name 'mode_list' -Value $env:MODE_LIST
          }
          if ($env:FLAG_LIST -ne $null -and $env:FLAG_LIST -ne '') {
            Set-OutputValue -Name 'flag_list' -Value $env:FLAG_LIST
          }
          if ($env:ARTIFACT_PREFIX -ne $null -and $env:ARTIFACT_PREFIX -ne '') {
            Set-OutputValue -Name 'artifact_prefix' -Value $env:ARTIFACT_PREFIX
          }
          if ($env:MANIFEST_ARTIFACT -ne $null -and $env:MANIFEST_ARTIFACT -ne '') {
            Set-OutputValue -Name 'manifest_artifact_name' -Value $env:MANIFEST_ARTIFACT
          }
          if ($env:DIFF_ARTIFACT -ne $null -and $env:DIFF_ARTIFACT -ne '') {
            Set-OutputValue -Name 'diff_artifact_name' -Value $env:DIFF_ARTIFACT
          }
          $hasDiff = if ($env:HAS_DIFF -eq 'true') { 'true' } else { 'false' }
          Set-OutputValue -Name 'has_diff' -Value $hasDiff
          if ($env:DIFF_DIRS -ne $null -and $env:DIFF_DIRS -ne '') {
            Set-MultilineOutput -Name 'diff_artifact_dirs' -Value $env:DIFF_DIRS
          }
          if ($env:HISTORY_REPORT_MD -ne $null -and $env:HISTORY_REPORT_MD -ne '') {
            Set-OutputValue -Name 'history_report_md' -Value $env:HISTORY_REPORT_MD
          }
          if ($env:HISTORY_REPORT_HTML -ne $null -and $env:HISTORY_REPORT_HTML -ne '') {
            Set-OutputValue -Name 'history_report_html' -Value $env:HISTORY_REPORT_HTML
          }

      - name: Runner Unblock Guard
        if: always()
        uses: ./.github/actions/runner-unblock-guard
        with:
          snapshot-path: tests/results/runner-unblock-snapshot.json
          cleanup: ${{ env.UNBLOCK_GUARD == '1' }}
          process-names: 'conhost,pwsh,LabVIEW,LVCompare'

name: Manual VI Compare (refs)

on:
  workflow_dispatch:
    inputs:
      sample_id:
        description: 'Optional sample id for concurrency grouping'
        required: false
        type: string
      target_path:
        description: 'Repository-relative VI path (e.g. path/to/VI1.vi)'
        required: true
        default: 'VI1.vi'
        type: string
      start_ref:
        description: 'Starting commit/ref (defaults to HEAD)'
        required: false
        default: ''
        type: string
      end_ref:
        description: 'Optional commit/ref to stop at (exclusive)'
        required: false
        default: ''
        type: string
      max_pairs:
        description: 'Maximum commit pairs to evaluate (0 = no limit)'
        required: false
        default: '10'
        type: string
      fail_fast:
        description: 'Stop after the first detected diff'
        required: false
        default: 'false'
        type: choice
        options: ['true','false']
      flag_noattr:
        description: 'Ignore VI attributes (-noattr)'
        required: false
        type: boolean
        default: true
      flag_nofp:
        description: 'Ignore front panel (-nofp)'
        required: false
        type: boolean
        default: true
      flag_nofppos:
        description: 'Ignore front panel position changes (-nofppos)'
        required: false
        type: boolean
        default: true
      flag_nobdcosm:
        description: 'Ignore block diagram cosmetic changes (-nobdcosm)'
        required: false
        type: boolean
        default: true
      modes:
        description: 'Comma-separated compare modes (default, attributes, front-panel, block-diagram, all)'
        required: false
        default: 'default'
        type: string
      additional_flags:
        description: 'Extra LVCompare flags (optional, space-delimited)'
        required: false
        default: ''
        type: string
      fail_on_diff:
        description: 'Fail the job when any compare diff is detected'
        required: false
        default: 'false'
        type: choice
        options: ['true','false']

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.sample_id || github.ref }}
  cancel-in-progress: false

jobs:
  preflight:
    runs-on: [self-hosted, Windows, X64]
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5
      - name: Verify LVCompare and idle LabVIEW state
        shell: pwsh
        run: |
          $cli = 'C:\Program Files\National Instruments\Shared\LabVIEW Compare\LVCompare.exe'
          if (-not (Test-Path -LiteralPath $cli)) {
            Write-Host "::error::LVCompare.exe not found at canonical path: $cli"; exit 1
          }
          $lv = Get-Process -Name 'LabVIEW' -ErrorAction SilentlyContinue
          if ($lv) { Write-Host "::error::LabVIEW.exe is running (PID(s): $($lv.Id -join ','))"; exit 1 }
          Write-Host 'Preflight OK: LVCompare present; LabVIEW not running.'

  compare:
    runs-on: [self-hosted, Windows, X64]
    needs: preflight
    timeout-minutes: 30
    env:
      UNBLOCK_GUARD: '1'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Ensure refs available
        shell: pwsh
        run: |
          git fetch --all --prune --prune-tags --tags

      - name: Compare VI history (commit pairs)
        id: history
        shell: pwsh
        env:
          TARGET_PATH: ${{ inputs.target_path }}
          START_REF: ${{ inputs.start_ref }}
          END_REF: ${{ inputs.end_ref }}
          MAX_PAIRS: ${{ inputs.max_pairs }}
          FLAG_NOATTR: ${{ inputs.flag_noattr }}
          FLAG_NOFP: ${{ inputs.flag_nofp }}
          FLAG_NOFPPOS: ${{ inputs.flag_nofppos }}
          FLAG_NOBDCOSM: ${{ inputs.flag_nobdcosm }}
          MODES: ${{ inputs.modes }}
          EXTRA_FLAGS: ${{ inputs.additional_flags }}
          FAIL_FAST: ${{ inputs.fail_fast }}
          FAIL_ON_DIFF: ${{ inputs.fail_on_diff }}
        run: |
          $ErrorActionPreference = 'Stop'
          function Convert-ToBoolean([string]$value, [bool]$default = $false) {
            if ([string]::IsNullOrWhiteSpace($value)) { return $default }
            switch ($value.Trim().ToLowerInvariant()) {
              'true' { return $true }
              'false' { return $false }
              '1' { return $true }
              '0' { return $false }
              'yes' { return $true }
              'no' { return $false }
              default { return [System.Convert]::ToBoolean($value) }
            }
          }
          if ([string]::IsNullOrWhiteSpace($env:TARGET_PATH)) {
            throw 'target_path input cannot be empty.'
          }
          $scriptPath = Join-Path $env:GITHUB_WORKSPACE 'tools/Compare-VIHistory.ps1'
          if (-not (Test-Path -LiteralPath $scriptPath -PathType Leaf)) {
            throw "Compare-VIHistory.ps1 not found at $scriptPath"
          }
          $resultsRoot = Join-Path $env:GITHUB_WORKSPACE 'tests/results/ref-compare/history'
          New-Item -ItemType Directory -Path $resultsRoot -Force | Out-Null

          function Normalize-Mode([string]$value) {
            $trim = $value.Trim()
            if (-not $trim) { return 'default' }
            return $trim.ToLowerInvariant()
          }

          $modeInput = if ([string]::IsNullOrWhiteSpace($env:MODES)) { 'default' } else { $env:MODES }
          $modeTokens = @(
            $modeInput -split '[,;]' |
              ForEach-Object { Normalize-Mode $_ } |
              Where-Object { $_ }
          )
          if ($modeTokens.Count -eq 0) { $modeTokens = @('default') }
          $modeTokens = @($modeTokens | Select-Object -Unique)

          $scriptArgs = @(
            '-TargetPath', $env:TARGET_PATH,
            '-ResultsDir', $resultsRoot,
            '-GitHubOutputPath', $env:GITHUB_OUTPUT,
            '-StepSummaryPath', $env:GITHUB_STEP_SUMMARY,
            '-Detailed',
            '-RenderReport'
          )
          foreach ($mode in $modeTokens) {
            $scriptArgs += '-Mode'
            $scriptArgs += $mode
          }
          if (-not [string]::IsNullOrWhiteSpace($env:START_REF)) {
            $scriptArgs += '-StartRef'
            $scriptArgs += $env:START_REF
          }
          if (-not [string]::IsNullOrWhiteSpace($env:END_REF)) {
            $scriptArgs += '-EndRef'
            $scriptArgs += $env:END_REF
          }
          if (-not [string]::IsNullOrWhiteSpace($env:MAX_PAIRS)) {
            $scriptArgs += '-MaxPairs'
            $scriptArgs += $env:MAX_PAIRS
          }
          if (-not [string]::IsNullOrWhiteSpace($env:EXTRA_FLAGS)) {
            $scriptArgs += '-AdditionalFlags'
            $scriptArgs += $env:EXTRA_FLAGS
          }
          $scriptArgs += ("-FlagNoAttr:{0}" -f (Convert-ToBoolean $env:FLAG_NOATTR $true))
          $scriptArgs += ("-FlagNoFp:{0}" -f (Convert-ToBoolean $env:FLAG_NOFP $true))
          $scriptArgs += ("-FlagNoFpPos:{0}" -f (Convert-ToBoolean $env:FLAG_NOFPPOS $true))
          $scriptArgs += ("-FlagNoBdCosm:{0}" -f (Convert-ToBoolean $env:FLAG_NOBDCOSM $true))
          $scriptArgs += ("-FailFast:{0}" -f (Convert-ToBoolean $env:FAIL_FAST $false))
          $scriptArgs += ("-FailOnDiff:{0}" -f (Convert-ToBoolean $env:FAIL_ON_DIFF $false))

          & $scriptPath @scriptArgs

      - name: Collect diff artifact directories
        id: diffscan
        if: ${{ always() && steps.history.outputs['manifest-path'] != '' }}
        shell: pwsh
        env:
          MODE_MANIFESTS_JSON: ${{ steps.history.outputs['mode-manifests-json'] }}
          LEGACY_MANIFEST_PATH: ${{ steps.history.outputs['manifest-path'] }}
        run: |
          $ErrorActionPreference = 'Stop'
          $manifestPaths = @()

          if (-not [string]::IsNullOrWhiteSpace($env:MODE_MANIFESTS_JSON)) {
            try {
              $modeInfo = $env:MODE_MANIFESTS_JSON | ConvertFrom-Json
              foreach ($entry in @($modeInfo)) {
                if ($entry -and $entry.manifest) {
                  $manifestPaths += [string]$entry.manifest
                }
              }
            } catch {
              Write-Warning ("Unable to parse mode manifest JSON: {0}" -f $_.Exception.Message)
            }
          }
          if ($manifestPaths.Count -eq 0 -and -not [string]::IsNullOrWhiteSpace($env:LEGACY_MANIFEST_PATH)) {
            $manifestPaths += ($env:LEGACY_MANIFEST_PATH -split "`n" | Where-Object { $_ })
          }

          $dirs = @()
          foreach ($manifestPath in $manifestPaths) {
            if (-not (Test-Path -LiteralPath $manifestPath)) { continue }
            $manifest = Get-Content -LiteralPath $manifestPath -Raw | ConvertFrom-Json
            foreach ($item in $manifest.comparisons) {
              if ($item.result -and $item.result.artifactDir) {
                if (Test-Path -LiteralPath $item.result.artifactDir) {
                  $dirs += (Resolve-Path -LiteralPath $item.result.artifactDir).Path
                }
              }
            }
          }
          if ($dirs.Count -gt 0) {
            "hasDiff=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            $block = @"
artifactDirs<<EOF
$($dirs -join "`n")
EOF
"@
            $block | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            "hasDiff=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Upload compare results
        if: ${{ always() && steps.history.outputs['results-dir'] != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: vi-compare-results
          path: |
            ${{ steps.history.outputs['manifest-path'] }}
            ${{ steps.history.outputs['results-dir'] }}/**/manifest.json
            ${{ steps.history.outputs['results-dir'] }}/**/*-summary.json
            ${{ steps.history.outputs['results-dir'] }}/**/*-exec.json
          if-no-files-found: warn

      - name: Upload LVCompare diff artifacts
        if: ${{ always() && steps.diffscan.outputs.hasDiff == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: vi-compare-diff-artifacts
          path: ${{ steps.diffscan.outputs.artifactDirs }}
          if-no-files-found: warn

      - name: Runner Unblock Guard
        if: always()
        uses: ./.github/actions/runner-unblock-guard
        with:
          snapshot-path: tests/results/runner-unblock-snapshot.json
          cleanup: ${{ env.UNBLOCK_GUARD == '1' }}
          process-names: 'conhost,pwsh,LabVIEW,LVCompare'

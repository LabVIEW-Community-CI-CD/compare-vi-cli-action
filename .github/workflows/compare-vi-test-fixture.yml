name: Compare VI Action Test Fixture

# Reusable workflow that other repositories can call to exercise this action.
# Primary goal: provide a stable, simulation-friendly harness (loop mode with
# simulated executor) so callers WITHOUT a LabVIEW installation can validate
# integration logic, output wiring, and downstream artifact handling.
#
# Modes:
#   loop-simulated (default)  -> uses loop mode with simulated executor (no LVCompare.exe needed)
#   loop-real                 -> loop mode expecting real LVCompare.exe at canonical path
#   single-real               -> single comparison (non-loop) requiring real LVCompare.exe
#
# NOTE: Only the canonical LVCompare path is supported:
#   C:\Program Files\National Instruments\Shared\LabVIEW Compare\LVCompare.exe
# Use single-real / loop-real ONLY on a self-hosted Windows runner that has the CLI installed.
#
# Sample caller usage from another repo:
#
#   name: Integration (Compare VI Fixture)
#   on: [workflow_dispatch]
#   jobs:
#     fixture:
#       uses: LabVIEW-Community-CI-CD/compare-vi-cli-action/.github/workflows/compare-vi-test-fixture.yml@v0.4.0-rc.1
#       with:
#         mode: loop-simulated
#         loop-max-iterations: 15
#         simulate-exit-code: 1
#         fail-on-diff: false
#
# The job exposes key outputs you can assert / gate on:
#   needs.fixture.outputs.diff
#   needs.fixture.outputs.iterations
#   needs.fixture.outputs.p50 (loop mode only, may be empty early)
#   etc.

on:
  workflow_call:
    inputs:
      mode:
        description: "loop-simulated | loop-real | single-real"
        required: false
        default: loop-simulated
        type: string
      fail-on-diff:
        description: "Fail the action step (and job) when a diff is detected (single-run) or any diff occurs (loop summary)."
        required: false
        default: 'true'
        type: string
      loop-max-iterations:
        description: "Loop mode: maximum iterations (ignored in single-real)."
        required: false
        default: '10'
        type: string
      loop-interval-seconds:
        description: "Loop mode: delay between iterations (seconds; fractional ok)."
        required: false
        default: '0'
        type: string
      histogram-bins:
        description: "Loop mode: number of latency histogram bins (0=disabled)."
        required: false
        default: '0'
        type: string
      simulate-exit-code:
        description: "Loop simulated executor exit code (0=no diff,1=diff). Ignored unless mode=loop-simulated."
        required: false
        default: '1'
        type: string
      lv-compare-args:
        description: "Optional additional LVCompare flags (only used in real modes)."
        required: false
        default: ''
        type: string
    outputs:
      diff:
        description: "true if differences detected"
        value: ${{ jobs.compare.outputs.diff }}
      exitCode:
        description: "Raw LVCompare exit code (single-real) or 0 (loop path)"
        value: ${{ jobs.compare.outputs.exitCode }}
      iterations:
        description: "Loop iterations (blank for single-real)"
        value: ${{ jobs.compare.outputs.iterations }}
      diffCount:
        description: "Loop diff count"
        value: ${{ jobs.compare.outputs.diffCount }}
      p50:
        description: "Loop p50 latency (seconds)"
        value: ${{ jobs.compare.outputs.p50 }}
      p90:
        description: "Loop p90 latency (seconds)"
        value: ${{ jobs.compare.outputs.p90 }}
      p99:
        description: "Loop p99 latency (seconds)"
        value: ${{ jobs.compare.outputs.p99 }}
      command:
        description: "Executed command line (single-real) or (loop-mode) placeholder"
        value: ${{ jobs.compare.outputs.command }}
      compareDurationSeconds:
        description: "Single-run duration or averageSeconds for loop"
        value: ${{ jobs.compare.outputs.compareDurationSeconds }}

jobs:
  compare:
    # For loop-simulated we could in theory use windows-latest GitHub-hosted runners.
    # Real modes demand self-hosted because LVCompare must exist at the canonical path.
    runs-on: windows-latest
    outputs:
      diff: ${{ steps.run.outputs.diff }}
      exitCode: ${{ steps.run.outputs.exitCode }}
      iterations: ${{ steps.run.outputs.iterations }}
      diffCount: ${{ steps.run.outputs.diffCount }}
      p50: ${{ steps.run.outputs.p50 }}
      p90: ${{ steps.run.outputs.p90 }}
      p99: ${{ steps.run.outputs.p99 }}
      command: ${{ steps.run.outputs.command }}
      compareDurationSeconds: ${{ steps.run.outputs.compareDurationSeconds }}
    steps:
      - name: Checkout action repository
        uses: actions/checkout@v5

      - name: Resolve effective configuration
        id: cfg
        shell: pwsh
        run: |
          $mode = '${{ inputs.mode }}'
          if ($mode -notin 'loop-simulated','loop-real','single-real') { throw "Unsupported mode: $mode" }
          echo "mode=$mode" >> $env:GITHUB_OUTPUT
          # Derive loop-enabled & simulation flags
          $loopEnabled = $mode -like 'loop-*'
          $simulate    = $mode -eq 'loop-simulated'
          echo "loopEnabled=$loopEnabled"  >> $env:GITHUB_OUTPUT
          echo "simulate=$simulate"        >> $env:GITHUB_OUTPUT

      - name: Run Compare VI Action
        id: run
        uses: ./
        with:
          base: Base.vi
          head: Head.vi
          # Loop toggles
          loop-enabled: ${{ steps.cfg.outputs.loopEnabled }}
          loop-max-iterations: ${{ inputs.loop-max-iterations }}
          loop-interval-seconds: ${{ inputs.loop-interval-seconds }}
          histogram-bins: ${{ inputs.histogram-bins }}
          # Simulation (ignored by single-real)
          loop-simulate: ${{ steps.cfg.outputs.simulate }}
            # Provide user-controlled simulated exit code when simulating
          loop-simulate-exit-code: ${{ inputs.simulate-exit-code }}
          fail-on-diff: ${{ inputs.fail-on-diff }}
          lvCompareArgs: ${{ inputs.lv-compare-args }}

      - name: Summarize Outputs
        if: always()
        shell: pwsh
        run: |
          Write-Host '=== Compare VI Action Test Fixture Summary ==='
          $pairs = @{
            mode='${{ inputs.mode }}'
            diff='${{ steps.run.outputs.diff }}'
            exitCode='${{ steps.run.outputs.exitCode }}'
            iterations='${{ steps.run.outputs.iterations }}'
            diffCount='${{ steps.run.outputs.diffCount }}'
            p50='${{ steps.run.outputs.p50 }}'
            p90='${{ steps.run.outputs.p90 }}'
            p99='${{ steps.run.outputs.p99 }}'
            command='${{ steps.run.outputs.command }}'
            compareDurationSeconds='${{ steps.run.outputs.compareDurationSeconds }}'
          }
          $pairs.GetEnumerator() | Sort-Object Name | ForEach-Object { Write-Host ("{0}: {1}" -f $_.Key,$_.Value) }
          # Emit a compact JSON blob (handy for callers collecting artifacts)
          $json = $pairs | ConvertTo-Json -Depth 3
          Set-Content -Path compare-vi-fixture-summary.json -Value $json -Encoding utf8
          Write-Host 'Wrote compare-vi-fixture-summary.json'

      - name: Upload Fixture Summary Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compare-vi-fixture-summary
          path: compare-vi-fixture-summary.json

      - name: Guidance (real mode prerequisites)
        if: steps.cfg.outputs.mode == 'single-real' || steps.cfg.outputs.mode == 'loop-real'
        shell: pwsh
        run: |
          Write-Host 'Real mode selected. Ensure the canonical LVCompare.exe exists:' -ForegroundColor Yellow
          Write-Host '  C:\\Program Files\\National Instruments\\Shared\\LabVIEW Compare\\LVCompare.exe'
          if (-not (Test-Path 'C:\Program Files\National Instruments\Shared\LabVIEW Compare\LVCompare.exe')) {
            Write-Warning 'LVCompare.exe NOT present. The preceding action step likely failed.'
          } else {
            Write-Host 'LVCompare.exe present.' -ForegroundColor Green
          }

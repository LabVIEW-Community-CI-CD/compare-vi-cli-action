name: CI Orchestrated (deterministic chain)

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      strategy:
        description: Execution strategy (matrix or single)
        required: false
        default: single
        type: choice
        options: [matrix, single]
      include_integration:
        description: Include Integration-tagged tests
        required: false
        default: 'true'
        type: choice
        options: ['true','false']
      sample_id:
        description: Sampling correlation id
        required: false
        type: string
      origin_kind:
        description: Trigger origin (e.g., issue_comment)
        required: false
        type: string
      origin_pr:
        description: PR number when triggered from a comment
        required: false
        type: string
      origin_comment_id:
        description: Comment id when triggered from a comment
        required: false
        type: string
      origin_comment_url:
        description: Comment URL when triggered from a comment
        required: false
        type: string
      origin_author:
        description: Comment author login
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.inputs.sample_id || github.ref }}
  cancel-in-progress: true

env:
  # Default toggles; jobs may override.
  WIRE_PROBES: ${{ vars.WIRE_PROBES || '0' }}

jobs:
  normalize:
    runs-on: ubuntu-latest
    outputs:
      include_integration: ${{ steps.normalize.outputs.normalized }}
    steps:
      - uses: actions/checkout@v5
      - name: Normalize include_integration
        id: normalize
        uses: ./.github/actions/bool-normalize
        with:
          value: ${{ inputs.include_integration || 'true' }}
      - name: Write run provenance
        shell: pwsh
        env:
          EV_ORIGIN_KIND: ${{ inputs.origin_kind || '' }}
          EV_ORIGIN_PR: ${{ inputs.origin_pr || '' }}
          EV_ORIGIN_COMMENT_ID: ${{ inputs.origin_comment_id || '' }}
          EV_ORIGIN_COMMENT_URL: ${{ inputs.origin_comment_url || '' }}
          EV_ORIGIN_AUTHOR: ${{ inputs.origin_author || '' }}
          EV_SAMPLE_ID: ${{ inputs.sample_id || '' }}
          EV_INCLUDE_INTEGRATION: ${{ inputs.include_integration || 'true' }}
          EV_STRATEGY: ${{ inputs.strategy || 'matrix' }}
        run: pwsh -File tools/Write-RunProvenance.ps1 -ResultsDir tests/results -AppendStepSummary
      - name: Upload run provenance
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: orchestrated-provenance
          path: tests/results/provenance.json

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Configure Git safe.directory
        shell: pwsh
        run: git config --global --add safe.directory $env:GITHUB_WORKSPACE
      - name: Non-LabVIEW checks (Docker)
        shell: pwsh
        run: pwsh -File ./tools/Run-NonLVChecksInDocker.ps1 -SkipWorkflow

  preflight:
    runs-on: windows-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v5
      - name: Configure Git safe.directory (service)
        shell: pwsh
        run: git config --global --add safe.directory $env:GITHUB_WORKSPACE
      - name: Runner health (hosted)
        if: ${{ vars.RUNNER_HEALTH != '0' }}
        shell: pwsh
        run: pwsh -File tools/Collect-RunnerHealth.ps1 -AppendSummary -EmitJson
      - name: Hosted LabVIEW/LVCompare preflight
        shell: pwsh
        run: |
          Write-Host "Runner: $([System.Environment]::OSVersion.VersionString)"
          Write-Host "Pwsh:   $($PSVersionTable.PSVersion)"
          $cli = 'C:\Program Files\National Instruments\Shared\LabVIEW Compare\LVCompare.exe'
          if (-not (Test-Path -LiteralPath $cli)) {
            Write-Host "::notice::LVCompare.exe not found at canonical path (hosted check)."
          }
          if (Get-Process -Name 'LabVIEW' -ErrorAction SilentlyContinue) {
            Write-Host '::error::LabVIEW.exe running during hosted preflight.'
            exit 1
          }
          if ($env:GITHUB_STEP_SUMMARY) {
            @('### Hosted Preflight','- LVCompare not required on windows-latest','- LabVIEW must be idle for self-hosted phases') | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          }

  probe:
    if: ${{ inputs.strategy == 'single' }}
    runs-on: [self-hosted, Windows, X64]
    timeout-minutes: 2
    needs: [normalize, preflight]
    outputs:
      ok: ${{ steps.probe.outputs.ok }}
    steps:
      - uses: actions/checkout@v5
      - name: Configure Git safe.directory (service)
        shell: pwsh
        run: git config --global --add safe.directory $env:GITHUB_WORKSPACE
      - name: Interactivity probe
        id: probe
        shell: pwsh
        run: |
          pwsh -File tools/Write-InteractivityProbe.ps1
          $ui = [System.Environment]::UserInteractive
          $in = $false; try { $in = [Console]::IsInputRedirected } catch {}
          $ok = ($ui -and -not $in)
          "ok=$ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

  phase-vars:
    if: ${{ inputs.strategy == 'matrix' || inputs.strategy == '' || needs.probe.outputs.ok == 'false' }}
    runs-on: [self-hosted, Windows, X64]
    timeout-minutes: 2
    needs: [normalize, preflight, probe]
    env:
      DETERMINISTIC: '1'
      UNBLOCK_GUARD: '0'
    steps:
      - uses: actions/checkout@v5
      - name: Configure Git safe.directory
        shell: pwsh
        run: git config --global --add safe.directory $env:GITHUB_WORKSPACE
      - name: Ensure Invoker (start)
        uses: ./.github/actions/ensure-invoker
        with:
          mode: start
          results-dir: tests/results
          timeout-seconds: '60'
          retries: '1'
          retry-delay-seconds: '0'
      - name: Write phase vars
        shell: pwsh
        run: pwsh -File tools/Write-PhaseVars.ps1 -OutputPath 'tests/results/_phase/vars.json'
      - name: Validate phase vars
        shell: pwsh
        run: pwsh -File tools/Validate-PhaseVars.ps1 -Path 'tests/results/_phase/vars.json' -Strict
      - name: Upload phase vars
        uses: actions/upload-artifact@v4
        with:
          name: phase-vars
          path: tests/results/_phase/vars.json
      - name: Ensure Invoker (stop)
        if: always()
        uses: ./.github/actions/ensure-invoker
        with:
          mode: stop
          results-dir: tests/results

  pester-unit:
    if: ${{ inputs.strategy == 'matrix' || inputs.strategy == '' || needs.probe.outputs.ok == 'false' }}
    runs-on: [self-hosted, Windows, X64]
    timeout-minutes: 6
    needs: [normalize, preflight, probe, phase-vars]
    strategy:
      matrix:
        category: [dispatcher, fixtures, schema, comparevi, loop, psummary, workflow]
      max-parallel: 1
    env:
      DETERMINISTIC: '1'
      UNBLOCK_GUARD: '0'
      DETECT_LEAKS: '1'
      LABVIEW_EXE: C:\Program Files\National Instruments\LabVIEW 2025\LabVIEW.exe
      EMIT_LV_CLOSURE_CRUMBS: '1'
      LV_BASE_VI: ${{ github.workspace }}/VI1.vi
      LV_HEAD_VI: ${{ github.workspace }}/VI2.vi
    steps:
      - uses: actions/checkout@v5
      - name: Configure Git safe.directory
        shell: pwsh
        run: git config --global --add safe.directory $env:GITHUB_WORKSPACE
      - name: Download phase vars
        uses: actions/download-artifact@v4
        with:
          name: phase-vars
          path: tests/results/_phase
      - name: Export phase vars
        shell: pwsh
        run: |
          pwsh -File tools/Validate-PhaseVars.ps1 -Path 'tests/results/_phase/vars.json' -Strict
          pwsh -File tools/Export-PhaseVars.ps1 -Path 'tests/results/_phase/vars.json' -Prefix 'PH_'
      - name: Ensure Invoker (start)
        id: inv_unit
        uses: ./.github/actions/ensure-invoker
        with:
          mode: start
          results-dir: tests/results
          category: ${{ matrix.category }}
          timeout-seconds: '60'
          retries: '1'
          retry-delay-seconds: '0'
      - name: Define category patterns
        id: unit_cats
        shell: pwsh
        run: |
          $cat='${{ matrix.category }}'
          switch ($cat) {
            'dispatcher' { $inc = @('Invoke-PesterTests*.ps1','PesterAvailability.Tests.ps1','NestedDispatcher*.Tests.ps1') }
            'fixtures'   { $inc = @('Fixtures.*.ps1','FixtureValidation*.ps1','FixtureSummary*.ps1','ViBinaryHandling.Tests.ps1','FixtureValidationDiff.Tests.ps1') }
            'schema'     { $inc = @('Schema.*.ps1','SchemaLite*.ps1') }
            'comparevi'  { $inc = @('CompareVI*.ps1','CanonicalCli.Tests.ps1','Args.Tokenization.Tests.ps1') }
            'loop'       { $inc = @('CompareLoop*.ps1','Run-AutonomousIntegrationLoop*.ps1','LoopMetrics.Tests.ps1','Integration-ControlLoop*.ps1','IntegrationControlLoop*.ps1') }
            'psummary'   { $inc = @('PesterSummary*.ps1','Write-PesterSummaryToStepSummary*.ps1','AggregationHints*.ps1') }
            'workflow'   { $inc = @('Workflow*.ps1','On-FixtureValidationFail.Tests.ps1','Watch.FlakyRecovery.Tests.ps1','FunctionShadowing*.ps1','FunctionProxy.Tests.ps1','RunSummary.Tool*.ps1','Action.CompositeOutputs.Tests.ps1','Binding.MinRepro.Tests.ps1','ArtifactTracking*.ps1','Guard.*.Tests.ps1') }
            default      { $inc = @('*.ps1') }
          }
          "include=$($inc -join ',')" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      - name: Run Pester (unit only)
        if: ${{ steps.inv_unit.outputs.ready == 'true' }}
        shell: pwsh
        run: |
          $inc = @()
          if ('${{ steps.unit_cats.outputs.include }}') { $inc = '${{ steps.unit_cats.outputs.include }}'.Split(',') | Where-Object { $_ }
          }
          $resDir = Join-Path 'tests/results' '${{ matrix.category }}'
          ./Invoke-PesterTests.ps1 -TestsPath tests -IncludeIntegration 'false' -ResultsPath $resDir -EmitFailuresJsonAlways -IncludePatterns $inc
      - name: Upload unit artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-unit-${{ matrix.category }}
          path: |
            tests/results/${{ matrix.category }}/**/*.xml
            tests/results/${{ matrix.category }}/**/*.txt
            tests/results/${{ matrix.category }}/pester-summary.json
            tests/results/${{ matrix.category }}/pester-failures.json
            tests/results/${{ matrix.category }}/session-index.json
      - name: Upload invoker boot log (unit)
        if: always() && hashFiles(format('tests/results/{0}/_invoker/boot.log', matrix.category)) != ''
        uses: actions/upload-artifact@v4
        with:
          name: invoker-boot-unit-${{ matrix.category }}
          path: tests/results/${{ matrix.category }}/_invoker/boot.log
      - name: Ensure Invoker (stop)
        if: always()
        uses: ./.github/actions/ensure-invoker
        with:
          mode: stop
          results-dir: tests/results
          category: ${{ matrix.category }}

  pester-integration:
    if: ${{ (inputs.strategy == 'matrix' || inputs.strategy == '' || needs.probe.outputs.ok == 'false') && needs.normalize.outputs.include_integration == 'true' }}
    runs-on: [self-hosted, Windows, X64]
    timeout-minutes: 6
    needs: [normalize, preflight, probe, phase-vars, pester-unit]
    strategy:
      matrix:
        category: [dispatcher, fixtures, schema, comparevi, loop, psummary, workflow]
      max-parallel: 1
    env:
      DETERMINISTIC: '1'
      UNBLOCK_GUARD: '0'
      DETECT_LEAKS: '1'
      LABVIEW_EXE: C:\Program Files\National Instruments\LabVIEW 2025\LabVIEW.exe
      EMIT_LV_CLOSURE_CRUMBS: '1'
    steps:
      - uses: actions/checkout@v5
      - name: Configure Git safe.directory
        shell: pwsh
        run: git config --global --add safe.directory $env:GITHUB_WORKSPACE
      - name: Download phase vars
        uses: actions/download-artifact@v4
        with:
          name: phase-vars
          path: tests/results/_phase
      - name: Export phase vars
        shell: pwsh
        run: |
          pwsh -File tools/Validate-PhaseVars.ps1 -Path 'tests/results/_phase/vars.json' -Strict
          pwsh -File tools/Export-PhaseVars.ps1 -Path 'tests/results/_phase/vars.json' -Prefix 'PH_'
      - name: Ensure Invoker (start)
        id: inv_integration
        uses: ./.github/actions/ensure-invoker
        with:
          mode: start
          results-dir: tests/results
          category: ${{ matrix.category }}
          timeout-seconds: '60'
          retries: '1'
          retry-delay-seconds: '0'
      - name: Define category patterns
        id: integration_cats
        shell: pwsh
        run: |
          $cat='${{ matrix.category }}'
          switch ($cat) {
            'dispatcher' { $inc = @('Invoke-PesterTests*.ps1','PesterAvailability.Tests.ps1','NestedDispatcher*.Tests.ps1') }
            'fixtures'   { $inc = @('Fixtures.*.ps1','FixtureValidation*.ps1','FixtureSummary*.ps1','ViBinaryHandling.Tests.ps1','FixtureValidationDiff.Tests.ps1') }
            'schema'     { $inc = @('Schema.*.ps1','SchemaLite*.ps1') }
            'comparevi'  { $inc = @('CompareVI*.ps1','CanonicalCli.Tests.ps1','Args.Tokenization.Tests.ps1') }
            'loop'       { $inc = @('CompareLoop*.ps1','Run-AutonomousIntegrationLoop*.ps1','LoopMetrics.Tests.ps1','Integration-ControlLoop*.ps1','IntegrationControlLoop*.ps1') }
            'psummary'   { $inc = @('PesterSummary*.ps1','Write-PesterSummaryToStepSummary*.ps1','AggregationHints*.ps1') }
            'workflow'   { $inc = @('Workflow*.ps1','On-FixtureValidationFail.Tests.ps1','Watch.FlakyRecovery.Tests.ps1','FunctionShadowing*.ps1','FunctionProxy.Tests.ps1','RunSummary.Tool*.ps1','Action.CompositeOutputs.Tests.ps1','Binding.MinRepro.Tests.ps1','ArtifactTracking*.ps1','Guard.*.Tests.ps1') }
            default      { $inc = @('*.ps1') }
          }
          "include=$($inc -join ',')" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      - name: Run Pester (integration only)
        if: ${{ steps.inv_integration.outputs.ready == 'true' }}
        shell: pwsh
        run: |
          $inc = @()
          if ('${{ steps.integration_cats.outputs.include }}') { $inc = '${{ steps.integration_cats.outputs.include }}'.Split(',') | Where-Object { $_ }
          }
          $resDir = Join-Path 'tests/results' '${{ matrix.category }}'
          ./Invoke-PesterTests.ps1 -TestsPath tests -IncludeIntegration 'true' -OnlyIntegration -ResultsPath $resDir -EmitFailuresJsonAlways -IncludePatterns $inc
      - name: Upload integration artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-integration-${{ matrix.category }}
          path: |
            tests/results/${{ matrix.category }}/**/*.xml
            tests/results/${{ matrix.category }}/**/*.txt
            tests/results/${{ matrix.category }}/pester-summary.json
            tests/results/${{ matrix.category }}/pester-failures.json
            tests/results/${{ matrix.category }}/session-index.json
      - name: Upload invoker boot log (integration)
        if: always() && hashFiles(format('tests/results/{0}/_invoker/boot.log', matrix.category)) != ''
        uses: actions/upload-artifact@v4
        with:
          name: invoker-boot-integration-${{ matrix.category }}
          path: tests/results/${{ matrix.category }}/_invoker/boot.log
      - name: Ensure Invoker (stop)
        if: always()
        uses: ./.github/actions/ensure-invoker
        with:
          mode: stop
          results-dir: tests/results
          category: ${{ matrix.category }}

  publish:
    runs-on: ubuntu-latest
    needs: [normalize, lint, preflight, phase-vars, pester-unit, pester-integration]
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v5
      - name: Summarize orchestrated run
        shell: pwsh
        run: |
          $lines = @(
            '### CI Orchestrated Summary',
            '- Lint: ${{ needs.lint.result }}',
            '- Unit: ${{ needs.pester-unit.result }}',
            '- Integration: ${{ needs.pester-integration.result || 'skipped' }}'
          )
          $lines -join "`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
      - name: Generate traceability matrix (JSON + optional HTML)
        if: ${{ vars.TRACE_MATRIX != '0' }}
        shell: pwsh
        run: |
          pwsh -File tools/Traceability-Matrix.ps1 -TestsPath 'tests' -ResultsRoot 'tests/results' -RenderHtml
      - name: Upload traceability artifacts
        if: ${{ vars.TRACE_MATRIX != '0' }}
        uses: actions/upload-artifact@v4
        with:
          name: orchestrated-traceability
          path: |
            tests/results/_trace/trace-matrix.json
            tests/results/_trace/trace-matrix.html
